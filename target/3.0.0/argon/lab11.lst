
/Users/addisonsimon/lab11/target/3.0.0/argon/lab11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003494  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d74b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e554  000d74b4  0001e554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000234  2003e5bc  2003e5bc  0002e5bc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d751c  000d751c  0002751c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7544  000d7544  00027544  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0019e14a  00000000  00000000  00027548  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001828a  00000000  00000000  001c5692  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003330a  00000000  00000000  001dd91c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002be0  00000000  00000000  00210c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000092c0  00000000  00000000  00213806  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003a5ad  00000000  00000000  0021cac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003f08d  00000000  00000000  00257073  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00129c98  00000000  00000000  00296100  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007908  00000000  00000000  003bfd98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fca1 	bl	d6974 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fca9 	bl	d6990 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e554 	.word	0x2003e554
   d4048:	000d74b4 	.word	0x000d74b4
   d404c:	2003e5bc 	.word	0x2003e5bc
   d4050:	2003e5bc 	.word	0x2003e5bc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 fa2d 	bl	d64bc <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7480 	.word	0x000d7480
   d407c:	000d74a4 	.word	0x000d74a4

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 bc50 	b.w	d4924 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 fd63 	bl	d4b50 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 b9d7 	b.w	d6440 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 b99f 	b.w	d53d4 <malloc>

000d4096 <_Znaj>:
   d4096:	f001 b99d 	b.w	d53d4 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 b9a3 	b.w	d53e4 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 f8e8 	bl	d527c <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d4f3d 	.word	0x000d4f3d

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40c4:	4770      	bx	lr

000d40c6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d40c6:	b510      	push	{r4, lr}
  }
   d40c8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d40ca:	4604      	mov	r4, r0
  }
   d40cc:	f002 fb25 	bl	d671a <_ZdlPvj>
   d40d0:	4620      	mov	r0, r4
   d40d2:	bd10      	pop	{r4, pc}

000d40d4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d40d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40d6:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d40d8:	4608      	mov	r0, r1
   d40da:	9101      	str	r1, [sp, #4]
   d40dc:	f002 fc8e 	bl	d69fc <strlen>
    if (len + l > buff_size)
   d40e0:	6863      	ldr	r3, [r4, #4]
   d40e2:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d40e4:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d40e6:	18e8      	adds	r0, r5, r3
   d40e8:	4290      	cmp	r0, r2
   d40ea:	d808      	bhi.n	d40fe <_ZN10BlynkParam3addEPKc.part.0.constprop.0+0x2a>
    memcpy(buff+len, b, l);
   d40ec:	6820      	ldr	r0, [r4, #0]
   d40ee:	9901      	ldr	r1, [sp, #4]
   d40f0:	462a      	mov	r2, r5
   d40f2:	4418      	add	r0, r3
   d40f4:	f002 fc3e 	bl	d6974 <memcpy>
    len += l;
   d40f8:	6860      	ldr	r0, [r4, #4]
   d40fa:	4428      	add	r0, r5
   d40fc:	6060      	str	r0, [r4, #4]
}
   d40fe:	b003      	add	sp, #12
   d4100:	bd30      	pop	{r4, r5, pc}
	...

000d4104 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d4104:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4106:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4108:	4b0a      	ldr	r3, [pc, #40]	; (d4134 <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d410a:	6003      	str	r3, [r0, #0]
   d410c:	4605      	mov	r5, r0
   d410e:	b17c      	cbz	r4, d4130 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4110:	6863      	ldr	r3, [r4, #4]
   d4112:	3b01      	subs	r3, #1
   d4114:	6063      	str	r3, [r4, #4]
   d4116:	b95b      	cbnz	r3, d4130 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d4118:	6823      	ldr	r3, [r4, #0]
   d411a:	4620      	mov	r0, r4
   d411c:	689b      	ldr	r3, [r3, #8]
   d411e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4120:	68a3      	ldr	r3, [r4, #8]
   d4122:	3b01      	subs	r3, #1
   d4124:	60a3      	str	r3, [r4, #8]
   d4126:	b91b      	cbnz	r3, d4130 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d4128:	6823      	ldr	r3, [r4, #0]
   d412a:	4620      	mov	r0, r4
   d412c:	68db      	ldr	r3, [r3, #12]
   d412e:	4798      	blx	r3
   d4130:	4628      	mov	r0, r5
   d4132:	bd38      	pop	{r3, r4, r5, pc}
   d4134:	000d718c 	.word	0x000d718c

000d4138 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4138:	b40e      	push	{r1, r2, r3}
   d413a:	b503      	push	{r0, r1, lr}
   d413c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d413e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4140:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4144:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4146:	f001 fbd2 	bl	d58ee <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d414a:	b002      	add	sp, #8
   d414c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4150:	b003      	add	sp, #12
   d4152:	4770      	bx	lr

000d4154 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4154:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4156:	4604      	mov	r4, r0
   d4158:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d415a:	7922      	ldrb	r2, [r4, #4]
   d415c:	68a3      	ldr	r3, [r4, #8]
   d415e:	b132      	cbz	r2, d416e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4160:	b9a3      	cbnz	r3, d418c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4162:	490b      	ldr	r1, [pc, #44]	; (d4190 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4164:	b002      	add	sp, #8
   d4166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d416a:	f001 bb85 	b.w	d5878 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d416e:	4a09      	ldr	r2, [pc, #36]	; (d4194 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4170:	7b26      	ldrb	r6, [r4, #12]
   d4172:	4d09      	ldr	r5, [pc, #36]	; (d4198 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4174:	4909      	ldr	r1, [pc, #36]	; (d419c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4176:	7b64      	ldrb	r4, [r4, #13]
   d4178:	2e01      	cmp	r6, #1
   d417a:	bf18      	it	ne
   d417c:	4629      	movne	r1, r5
   d417e:	e9cd 1400 	strd	r1, r4, [sp]
   d4182:	4907      	ldr	r1, [pc, #28]	; (d41a0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4184:	f7ff ffd8 	bl	d4138 <_ZN5Print6printfEPKcz>
  }
   d4188:	b002      	add	sp, #8
   d418a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d418c:	4a05      	ldr	r2, [pc, #20]	; (d41a4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d418e:	e7ef      	b.n	d4170 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4190:	000d6b61 	.word	0x000d6b61
   d4194:	000d6b58 	.word	0x000d6b58
   d4198:	000d6b5d 	.word	0x000d6b5d
   d419c:	000d6b59 	.word	0x000d6b59
   d41a0:	000d6b77 	.word	0x000d6b77
   d41a4:	000d6b50 	.word	0x000d6b50

000d41a8 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d41a8:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d41aa:	f000 fecf 	bl	d4f4c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d41ae:	4b03      	ldr	r3, [pc, #12]	; (d41bc <_ZN10CloudClass7processEv+0x14>)
   d41b0:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d41b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d41b6:	f001 b89d 	b.w	d52f4 <spark_process>
   d41ba:	bf00      	nop
   d41bc:	2003e7d4 	.word	0x2003e7d4

000d41c0 <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41c0:	6803      	ldr	r3, [r0, #0]
   d41c2:	b12b      	cbz	r3, d41d0 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d41c4:	6842      	ldr	r2, [r0, #4]
   d41c6:	4293      	cmp	r3, r2
   d41c8:	d202      	bcs.n	d41d0 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d41ca:	4618      	mov	r0, r3
   d41cc:	f002 bbbc 	b.w	d6948 <atoi>
   d41d0:	2000      	movs	r0, #0
   d41d2:	4770      	bx	lr

000d41d4 <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d41d4:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41d6:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d41d8:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41da:	b145      	cbz	r5, d41ee <_ZN10BlynkParam8iteratorppEv+0x1a>
   d41dc:	6843      	ldr	r3, [r0, #4]
   d41de:	429d      	cmp	r5, r3
   d41e0:	d205      	bcs.n	d41ee <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d41e2:	4628      	mov	r0, r5
   d41e4:	f002 fc0a 	bl	d69fc <strlen>
   d41e8:	3001      	adds	r0, #1
   d41ea:	4405      	add	r5, r0
   d41ec:	6025      	str	r5, [r4, #0]
        }
   d41ee:	4620      	mov	r0, r4
   d41f0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d41f4 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d41f4:	b538      	push	{r3, r4, r5, lr}
   d41f6:	4604      	mov	r4, r0
   d41f8:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d41fa:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d41fe:	6825      	ldr	r5, [r4, #0]
   d4200:	4a04      	ldr	r2, [pc, #16]	; (d4214 <_ZN10BlynkParam3addEi+0x20>)
   d4202:	1a09      	subs	r1, r1, r0
   d4204:	4428      	add	r0, r5
   d4206:	f001 f8f5 	bl	d53f4 <snprintf>
   d420a:	6863      	ldr	r3, [r4, #4]
   d420c:	3001      	adds	r0, #1
   d420e:	4403      	add	r3, r0
   d4210:	6063      	str	r3, [r4, #4]
    }
   d4212:	bd38      	pop	{r3, r4, r5, pc}
   d4214:	000d6b94 	.word	0x000d6b94

000d4218 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d4218:	b538      	push	{r3, r4, r5, lr}
   d421a:	4604      	mov	r4, r0
   d421c:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d421e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d4222:	6825      	ldr	r5, [r4, #0]
   d4224:	4a04      	ldr	r2, [pc, #16]	; (d4238 <_ZN10BlynkParam3addEl+0x20>)
   d4226:	1a09      	subs	r1, r1, r0
   d4228:	4428      	add	r0, r5
   d422a:	f001 f8e3 	bl	d53f4 <snprintf>
   d422e:	6863      	ldr	r3, [r4, #4]
   d4230:	3001      	adds	r0, #1
   d4232:	4403      	add	r3, r0
   d4234:	6063      	str	r3, [r4, #4]
    }
   d4236:	bd38      	pop	{r3, r4, r5, pc}
   d4238:	000d6b97 	.word	0x000d6b97

000d423c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d423c:	b508      	push	{r3, lr}
        state = CONNECTING;
   d423e:	2300      	movs	r3, #0
   d4240:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4242:	6800      	ldr	r0, [r0, #0]
   d4244:	f001 fea0 	bl	d5f88 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d4248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d424c:	f000 be48 	b.w	d4ee0 <BlynkNoOpCbk>

000d4250 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d4250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d4254:	eb01 0902 	add.w	r9, r1, r2
   d4258:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d425a:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d425c:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d4260:	4680      	mov	r8, r0
   d4262:	460d      	mov	r5, r1
   d4264:	4616      	mov	r6, r2
    if (it >= param.end())
   d4266:	f080 8092 	bcs.w	d438e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d426a:	a805      	add	r0, sp, #20
   d426c:	880f      	ldrh	r7, [r1, #0]
   d426e:	f7ff ffb1 	bl	d41d4 <_ZN10BlynkParam8iteratorppEv>
   d4272:	6803      	ldr	r3, [r0, #0]
   d4274:	4599      	cmp	r9, r3
   d4276:	f240 808a 	bls.w	d438e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d427a:	a805      	add	r0, sp, #20
   d427c:	f7ff ffa0 	bl	d41c0 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d4280:	f247 2376 	movw	r3, #29302	; 0x7276
   d4284:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4286:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   d4288:	f000 80a9 	beq.w	d43de <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   d428c:	d827      	bhi.n	d42de <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d428e:	f247 2361 	movw	r3, #29281	; 0x7261
   d4292:	429f      	cmp	r7, r3
   d4294:	d07e      	beq.n	d4394 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   d4296:	f247 2364 	movw	r3, #29284	; 0x7264
   d429a:	429f      	cmp	r7, r3
   d429c:	d042      	beq.n	d4324 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   d429e:	f646 5370 	movw	r3, #28016	; 0x6d70
   d42a2:	429f      	cmp	r7, r3
   d42a4:	d128      	bne.n	d42f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d42a6:	4e63      	ldr	r6, [pc, #396]	; (d4434 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d42a8:	4f63      	ldr	r7, [pc, #396]	; (d4438 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   d42aa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; d444c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   d42ae:	9b05      	ldr	r3, [sp, #20]
   d42b0:	4599      	cmp	r9, r3
   d42b2:	d96c      	bls.n	d438e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d42b4:	a805      	add	r0, sp, #20
   d42b6:	f7ff ff83 	bl	d41c0 <_ZNK10BlynkParam8iterator5asIntEv>
   d42ba:	b2c4      	uxtb	r4, r0
            ++it;
   d42bc:	a805      	add	r0, sp, #20
   d42be:	f7ff ff89 	bl	d41d4 <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d42c2:	9d05      	ldr	r5, [sp, #20]
   d42c4:	4631      	mov	r1, r6
   d42c6:	4628      	mov	r0, r5
   d42c8:	f002 fb8e 	bl	d69e8 <strcmp>
   d42cc:	4601      	mov	r1, r0
   d42ce:	b9e0      	cbnz	r0, d430a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   d42d0:	4620      	mov	r0, r4
   d42d2:	f002 f963 	bl	d659c <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d42d6:	a805      	add	r0, sp, #20
   d42d8:	f7ff ff7c 	bl	d41d4 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d42dc:	e7e7      	b.n	d42ae <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   d42de:	f247 7364 	movw	r3, #30564	; 0x7764
   d42e2:	429f      	cmp	r7, r3
   d42e4:	d03f      	beq.n	d4366 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   d42e6:	f247 7376 	movw	r3, #30582	; 0x7776
   d42ea:	429f      	cmp	r7, r3
   d42ec:	f000 8087 	beq.w	d43fe <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   d42f0:	f247 7361 	movw	r3, #30561	; 0x7761
   d42f4:	429f      	cmp	r7, r3
   d42f6:	d05f      	beq.n	d43b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d42f8:	2300      	movs	r3, #0
   d42fa:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d42fe:	2202      	movs	r2, #2
   d4300:	9200      	str	r2, [sp, #0]
   d4302:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d4306:	4619      	mov	r1, r3
   d4308:	e029      	b.n	d435e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d430a:	4639      	mov	r1, r7
   d430c:	4628      	mov	r0, r5
   d430e:	f002 fb6b 	bl	d69e8 <strcmp>
   d4312:	b128      	cbz	r0, d4320 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   d4314:	4641      	mov	r1, r8
   d4316:	4628      	mov	r0, r5
   d4318:	f002 fb66 	bl	d69e8 <strcmp>
   d431c:	2800      	cmp	r0, #0
   d431e:	d1da      	bne.n	d42d6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   d4320:	2101      	movs	r1, #1
   d4322:	e7d5      	b.n	d42d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4324:	ab0a      	add	r3, sp, #40	; 0x28
   d4326:	4945      	ldr	r1, [pc, #276]	; (d443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   d4328:	9307      	str	r3, [sp, #28]
   d432a:	a807      	add	r0, sp, #28
   d432c:	2310      	movs	r3, #16
   d432e:	2500      	movs	r5, #0
   d4330:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d4334:	f7ff fece 	bl	d40d4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d4338:	a807      	add	r0, sp, #28
   d433a:	4621      	mov	r1, r4
   d433c:	f7ff ff5a 	bl	d41f4 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d4340:	4620      	mov	r0, r4
   d4342:	f002 f955 	bl	d65f0 <digitalRead>
        rsp.add(analogRead(pin));
   d4346:	4601      	mov	r1, r0
   d4348:	a807      	add	r0, sp, #28
   d434a:	f7ff ff65 	bl	d4218 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d434e:	9b08      	ldr	r3, [sp, #32]
   d4350:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4354:	3b01      	subs	r3, #1
   d4356:	9300      	str	r3, [sp, #0]
   d4358:	9b07      	ldr	r3, [sp, #28]
   d435a:	462a      	mov	r2, r5
   d435c:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d435e:	4640      	mov	r0, r8
   d4360:	f000 fb0c 	bl	d497c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d4364:	e013      	b.n	d438e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   d4366:	a805      	add	r0, sp, #20
   d4368:	f7ff ff34 	bl	d41d4 <_ZN10BlynkParam8iteratorppEv>
   d436c:	6803      	ldr	r3, [r0, #0]
   d436e:	4599      	cmp	r9, r3
   d4370:	d90d      	bls.n	d438e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d4372:	b2a4      	uxth	r4, r4
   d4374:	2101      	movs	r1, #1
   d4376:	4620      	mov	r0, r4
   d4378:	f002 f910 	bl	d659c <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d437c:	a805      	add	r0, sp, #20
   d437e:	f7ff ff1f 	bl	d41c0 <_ZNK10BlynkParam8iterator5asIntEv>
   d4382:	1e01      	subs	r1, r0, #0
   d4384:	bf18      	it	ne
   d4386:	2101      	movne	r1, #1
   d4388:	4620      	mov	r0, r4
   d438a:	f002 f918 	bl	d65be <digitalWrite>
    }
}
   d438e:	b00f      	add	sp, #60	; 0x3c
   d4390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4394:	ab0a      	add	r3, sp, #40	; 0x28
   d4396:	9307      	str	r3, [sp, #28]
   d4398:	a807      	add	r0, sp, #28
   d439a:	2310      	movs	r3, #16
   d439c:	4928      	ldr	r1, [pc, #160]	; (d4440 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   d439e:	2500      	movs	r5, #0
   d43a0:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d43a4:	f7ff fe96 	bl	d40d4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d43a8:	a807      	add	r0, sp, #28
   d43aa:	4621      	mov	r1, r4
   d43ac:	f7ff ff22 	bl	d41f4 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d43b0:	4620      	mov	r0, r4
   d43b2:	f002 f930 	bl	d6616 <analogRead>
   d43b6:	e7c6      	b.n	d4346 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   d43b8:	a805      	add	r0, sp, #20
   d43ba:	f7ff ff0b 	bl	d41d4 <_ZN10BlynkParam8iteratorppEv>
   d43be:	6803      	ldr	r3, [r0, #0]
   d43c0:	4599      	cmp	r9, r3
   d43c2:	d9e4      	bls.n	d438e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d43c4:	b2a4      	uxth	r4, r4
   d43c6:	2101      	movs	r1, #1
   d43c8:	4620      	mov	r0, r4
   d43ca:	f002 f8e7 	bl	d659c <pinMode>
        analogWrite(pin, it.asInt());
   d43ce:	a805      	add	r0, sp, #20
   d43d0:	f7ff fef6 	bl	d41c0 <_ZNK10BlynkParam8iterator5asIntEv>
   d43d4:	4601      	mov	r1, r0
   d43d6:	4620      	mov	r0, r4
   d43d8:	f002 f934 	bl	d6644 <_Z11analogWritetm>
    } break;
   d43dc:	e7d7      	b.n	d438e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   d43de:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   d43e0:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d43e4:	f000 fd7e 	bl	d4ee4 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d43e8:	4603      	mov	r3, r0
            handler(req);
   d43ea:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d43ec:	b123      	cbz	r3, d43f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   d43ee:	4a15      	ldr	r2, [pc, #84]	; (d4444 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   d43f0:	4293      	cmp	r3, r2
   d43f2:	d001      	beq.n	d43f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   d43f4:	4798      	blx	r3
   d43f6:	e7ca      	b.n	d438e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   d43f8:	f000 fd70 	bl	d4edc <BlynkWidgetRead>
        }
    }
   d43fc:	e7c7      	b.n	d438e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   d43fe:	a805      	add	r0, sp, #20
   d4400:	f7ff fee8 	bl	d41d4 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d4404:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   d4406:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d440a:	1b5d      	subs	r5, r3, r5
   d440c:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d440e:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d4410:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   d4414:	950c      	str	r5, [sp, #48]	; 0x30
   d4416:	f000 fd6f 	bl	d4ef8 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d441a:	4603      	mov	r3, r0
            handler(req, param);
   d441c:	a90a      	add	r1, sp, #40	; 0x28
   d441e:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d4420:	b123      	cbz	r3, d442c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   d4422:	4a09      	ldr	r2, [pc, #36]	; (d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   d4424:	4293      	cmp	r3, r2
   d4426:	d001      	beq.n	d442c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   d4428:	4798      	blx	r3
   d442a:	e7b0      	b.n	d438e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   d442c:	f000 fd57 	bl	d4ede <BlynkWidgetWrite>
    } break;
   d4430:	e7ad      	b.n	d438e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   d4432:	bf00      	nop
   d4434:	000d6b9b 	.word	0x000d6b9b
   d4438:	000d6b9e 	.word	0x000d6b9e
   d443c:	000d6ba6 	.word	0x000d6ba6
   d4440:	000d6ba9 	.word	0x000d6ba9
   d4444:	000d4edd 	.word	0x000d4edd
   d4448:	000d4edf 	.word	0x000d4edf
   d444c:	000d6ba2 	.word	0x000d6ba2

000d4450 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d4450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4454:	b08c      	sub	sp, #48	; 0x30
   d4456:	af04      	add	r7, sp, #16
   d4458:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d445a:	2205      	movs	r2, #5
   d445c:	6800      	ldr	r0, [r0, #0]
   d445e:	1d39      	adds	r1, r7, #4
   d4460:	f001 fb4f 	bl	d5b02 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d4464:	b3b8      	cbz	r0, d44d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d4466:	2805      	cmp	r0, #5
   d4468:	d004      	beq.n	d4474 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d446a:	2000      	movs	r0, #0
}
   d446c:	3720      	adds	r7, #32
   d446e:	46bd      	mov	sp, r7
   d4470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4474:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4478:	0a13      	lsrs	r3, r2, #8
   d447a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d447e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d4482:	f8a7 3005 	strh.w	r3, [r7, #5]
   d4486:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d4488:	0a13      	lsrs	r3, r2, #8
   d448a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d448e:	fa1f f883 	uxth.w	r8, r3
   d4492:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d4496:	2900      	cmp	r1, #0
   d4498:	d0e7      	beq.n	d446a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d449a:	793b      	ldrb	r3, [r7, #4]
   d449c:	bb23      	cbnz	r3, d44e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d449e:	f000 fd1b 	bl	d4ed8 <_Z11BlynkMillisv>
   d44a2:	4602      	mov	r2, r0
   d44a4:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d44a6:	7f60      	ldrb	r0, [r4, #29]
   d44a8:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d44ac:	b9c0      	cbnz	r0, d44e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d44ae:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d44b2:	2901      	cmp	r1, #1
   d44b4:	d114      	bne.n	d44e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d44b6:	2b09      	cmp	r3, #9
   d44b8:	d00f      	beq.n	d44da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d44ba:	2bc8      	cmp	r3, #200	; 0xc8
   d44bc:	d001      	beq.n	d44c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d44be:	2b04      	cmp	r3, #4
   d44c0:	d1d4      	bne.n	d446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d44c2:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d44c4:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d44c6:	4620      	mov	r0, r4
                state = CONNECTED;
   d44c8:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d44ca:	f000 fb05 	bl	d4ad8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d44ce:	f7ff fe6b 	bl	d41a8 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d44d2:	f000 fd05 	bl	d4ee0 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d44d6:	2001      	movs	r0, #1
   d44d8:	e7c8      	b.n	d446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d44da:	2303      	movs	r3, #3
   d44dc:	7763      	strb	r3, [r4, #29]
                break;
   d44de:	e7c5      	b.n	d446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d44e0:	1f58      	subs	r0, r3, #5
   d44e2:	bf18      	it	ne
   d44e4:	2001      	movne	r0, #1
   d44e6:	e7c1      	b.n	d446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d44e8:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d44ec:	d903      	bls.n	d44f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d44ee:	4620      	mov	r0, r4
   d44f0:	f7ff fea4 	bl	d423c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d44f4:	e7ef      	b.n	d44d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d44f6:	f108 0308 	add.w	r3, r8, #8
   d44fa:	f023 0307 	bic.w	r3, r3, #7
   d44fe:	466e      	mov	r6, sp
   d4500:	ebad 0d03 	sub.w	sp, sp, r3
   d4504:	ad04      	add	r5, sp, #16
   d4506:	6820      	ldr	r0, [r4, #0]
   d4508:	4642      	mov	r2, r8
   d450a:	4629      	mov	r1, r5
   d450c:	f001 faf9 	bl	d5b02 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d4510:	4580      	cmp	r8, r0
   d4512:	f04f 0000 	mov.w	r0, #0
   d4516:	d17f      	bne.n	d4618 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
    inputBuffer[hdr.length] = '\0';
   d4518:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d451c:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d451e:	f000 fcdb 	bl	d4ed8 <_Z11BlynkMillisv>
    switch (hdr.type)
   d4522:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d4524:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d4526:	2b14      	cmp	r3, #20
   d4528:	f000 80a6 	beq.w	d4678 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d452c:	d848      	bhi.n	d45c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d452e:	2b0f      	cmp	r3, #15
   d4530:	f000 80a2 	beq.w	d4678 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d4534:	d807      	bhi.n	d4546 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d4536:	2b02      	cmp	r3, #2
   d4538:	d048      	beq.n	d45cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   d453a:	2b06      	cmp	r3, #6
   d453c:	d051      	beq.n	d45e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
        internalReconnect();
   d453e:	4620      	mov	r0, r4
   d4540:	f7ff fe7c 	bl	d423c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4544:	e058      	b.n	d45f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
    switch (hdr.type)
   d4546:	2b11      	cmp	r3, #17
   d4548:	d1f9      	bne.n	d453e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d454a:	2300      	movs	r3, #0
   d454c:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d454e:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d4552:	442b      	add	r3, r5
        if (it >= param.end())
   d4554:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4556:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d455a:	d24d      	bcs.n	d45f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        ++it;
   d455c:	f107 000c 	add.w	r0, r7, #12
   d4560:	f8d5 8000 	ldr.w	r8, [r5]
   d4564:	f7ff fe36 	bl	d41d4 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d4568:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d456a:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d456e:	1b5d      	subs	r5, r3, r5
   d4570:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d4572:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   d4576:	687b      	ldr	r3, [r7, #4]
   d4578:	61fd      	str	r5, [r7, #28]
   d457a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d457e:	8363      	strh	r3, [r4, #26]
   d4580:	4b64      	ldr	r3, [pc, #400]	; (d4714 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   d4582:	4598      	cmp	r8, r3
   d4584:	f000 80bf 	beq.w	d4706 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
   d4588:	f200 808c 	bhi.w	d46a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d458c:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   d4590:	f46f 7200 	mvn.w	r2, #512	; 0x200
   d4594:	4413      	add	r3, r2
   d4596:	4598      	cmp	r8, r3
   d4598:	f000 809d 	beq.w	d46d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
   d459c:	d879      	bhi.n	d4692 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
   d459e:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d45a2:	3b06      	subs	r3, #6
   d45a4:	4598      	cmp	r8, r3
   d45a6:	f000 809c 	beq.w	d46e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
   d45aa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d45ae:	3303      	adds	r3, #3
   d45b0:	4598      	cmp	r8, r3
   d45b2:	d16b      	bne.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d45b4:	f107 0114 	add.w	r1, r7, #20
   d45b8:	4638      	mov	r0, r7
   d45ba:	f000 fc90 	bl	d4ede <BlynkWidgetWrite>
   d45be:	e065      	b.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
    switch (hdr.type)
   d45c0:	2b29      	cmp	r3, #41	; 0x29
   d45c2:	d01b      	beq.n	d45fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   d45c4:	2b37      	cmp	r3, #55	; 0x37
   d45c6:	d017      	beq.n	d45f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d45c8:	2b1d      	cmp	r3, #29
   d45ca:	d1b8      	bne.n	d453e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d45cc:	7f63      	ldrb	r3, [r4, #29]
   d45ce:	b943      	cbnz	r3, d45e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            state = CONNECTED;
   d45d0:	2301      	movs	r3, #1
   d45d2:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d45d4:	4620      	mov	r0, r4
   d45d6:	f000 fa7f 	bl	d4ad8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d45da:	f7ff fde5 	bl	d41a8 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d45de:	f000 fc7f 	bl	d4ee0 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   d45e2:	2300      	movs	r3, #0
   d45e4:	21c8      	movs	r1, #200	; 0xc8
   d45e6:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d45ea:	9100      	str	r1, [sp, #0]
   d45ec:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d45f0:	4619      	mov	r1, r3
   d45f2:	4620      	mov	r0, r4
   d45f4:	f000 f9c2 	bl	d497c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d45f8:	2001      	movs	r0, #1
   d45fa:	e00d      	b.n	d4618 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
        if (!redir_serv) {
   d45fc:	68a3      	ldr	r3, [r4, #8]
   d45fe:	b91b      	cbnz	r3, d4608 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b8>
             redir_serv = (char*)malloc(64);
   d4600:	2040      	movs	r0, #64	; 0x40
   d4602:	f000 fee7 	bl	d53d4 <malloc>
   d4606:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d4608:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d460c:	44a8      	add	r8, r5
        if (it >= param.end())
   d460e:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4610:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d4614:	d302      	bcc.n	d461c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
            return false;
   d4616:	2000      	movs	r0, #0
   d4618:	46b5      	mov	sp, r6
   d461a:	e727      	b.n	d446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   d461c:	4629      	mov	r1, r5
   d461e:	2240      	movs	r2, #64	; 0x40
   d4620:	68a0      	ldr	r0, [r4, #8]
   d4622:	f002 f9f3 	bl	d6a0c <strncpy>
        redir_serv[63] = '\0';
   d4626:	68a3      	ldr	r3, [r4, #8]
   d4628:	2500      	movs	r5, #0
   d462a:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   d462e:	f107 0014 	add.w	r0, r7, #20
   d4632:	f7ff fdcf 	bl	d41d4 <_ZN10BlynkParam8iteratorppEv>
   d4636:	6803      	ldr	r3, [r0, #0]
   d4638:	4543      	cmp	r3, r8
   d463a:	d21b      	bcs.n	d4674 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d463c:	6978      	ldr	r0, [r7, #20]
   d463e:	b120      	cbz	r0, d464a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
   d4640:	69bb      	ldr	r3, [r7, #24]
   d4642:	4298      	cmp	r0, r3
   d4644:	d214      	bcs.n	d4670 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d4646:	f002 f983 	bl	d6950 <atol>
            redir_port = it.asLong();
   d464a:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d464c:	6820      	ldr	r0, [r4, #0]
   d464e:	f001 fc9b 	bl	d5f88 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d4652:	6823      	ldr	r3, [r4, #0]
   d4654:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d4656:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d4658:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d465a:	2300      	movs	r3, #0
   d465c:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d465e:	f000 fc3b 	bl	d4ed8 <_Z11BlynkMillisv>
   d4662:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4666:	3808      	subs	r0, #8
   d4668:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d466c:	6160      	str	r0, [r4, #20]
   d466e:	e7c3      	b.n	d45f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4670:	4628      	mov	r0, r5
   d4672:	e7ea      	b.n	d464a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   d4674:	2550      	movs	r5, #80	; 0x50
   d4676:	e7e9      	b.n	d464c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fc>
        msgIdOutOverride = hdr.msg_id;
   d4678:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   d467a:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   d467e:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d4682:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d4684:	4629      	mov	r1, r5
   d4686:	4620      	mov	r0, r4
   d4688:	f7ff fde2 	bl	d4250 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d468c:	2300      	movs	r3, #0
   d468e:	8363      	strh	r3, [r4, #26]
   d4690:	e7b2      	b.n	d45f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4692:	4b21      	ldr	r3, [pc, #132]	; (d4718 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   d4694:	4598      	cmp	r8, r3
   d4696:	d1f9      	bne.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   d4698:	f107 0114 	add.w	r1, r7, #20
   d469c:	4638      	mov	r0, r7
   d469e:	f000 fc1e 	bl	d4ede <BlynkWidgetWrite>
   d46a2:	e7f3      	b.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d46a4:	4b1d      	ldr	r3, [pc, #116]	; (d471c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2cc>)
   d46a6:	4598      	cmp	r8, r3
   d46a8:	d021      	beq.n	d46ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
   d46aa:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d46ae:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d46b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d46b6:	4598      	cmp	r8, r3
   d46b8:	d01f      	beq.n	d46fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
   d46ba:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   d46be:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   d46c2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   d46c6:	4598      	cmp	r8, r3
   d46c8:	d1e0      	bne.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d46ca:	f107 0114 	add.w	r1, r7, #20
   d46ce:	4638      	mov	r0, r7
   d46d0:	f000 fc05 	bl	d4ede <BlynkWidgetWrite>
   d46d4:	e7da      	b.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d46d6:	f107 0114 	add.w	r1, r7, #20
   d46da:	4638      	mov	r0, r7
   d46dc:	f000 fbff 	bl	d4ede <BlynkWidgetWrite>
   d46e0:	e7d4      	b.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d46e2:	f107 0114 	add.w	r1, r7, #20
   d46e6:	4638      	mov	r0, r7
   d46e8:	f000 fbf9 	bl	d4ede <BlynkWidgetWrite>
   d46ec:	e7ce      	b.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d46ee:	f107 0114 	add.w	r1, r7, #20
   d46f2:	4638      	mov	r0, r7
   d46f4:	f000 fbf3 	bl	d4ede <BlynkWidgetWrite>
   d46f8:	e7c8      	b.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d46fa:	f107 0114 	add.w	r1, r7, #20
   d46fe:	4638      	mov	r0, r7
   d4700:	f000 fbed 	bl	d4ede <BlynkWidgetWrite>
   d4704:	e7c2      	b.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   d4706:	f107 0114 	add.w	r1, r7, #20
   d470a:	4638      	mov	r0, r7
   d470c:	f000 fbe7 	bl	d4ede <BlynkWidgetWrite>
   d4710:	e7bc      	b.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d4712:	bf00      	nop
   d4714:	00736676 	.word	0x00736676
   d4718:	00676264 	.word	0x00676264
   d471c:	6e6f6361 	.word	0x6e6f6361

000d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d4720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4724:	4604      	mov	r4, r0
   d4726:	b08c      	sub	sp, #48	; 0x30
   d4728:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d472a:	f7ff fd3d 	bl	d41a8 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d472e:	7f63      	ldrb	r3, [r4, #29]
   d4730:	2b02      	cmp	r3, #2
   d4732:	f000 80a8 	beq.w	d4886 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d4736:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d4738:	8b62      	ldrh	r2, [r4, #26]
   d473a:	3301      	adds	r3, #1
   d473c:	b2db      	uxtb	r3, r3
   d473e:	7723      	strb	r3, [r4, #28]
   d4740:	b10a      	cbz	r2, d4746 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d4742:	2501      	movs	r5, #1
   d4744:	e016      	b.n	d4774 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d4746:	2b02      	cmp	r3, #2
   d4748:	d8fb      	bhi.n	d4742 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d474a:	6820      	ldr	r0, [r4, #0]
   d474c:	f001 fa3b 	bl	d5bc6 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d4750:	b1b8      	cbz	r0, d4782 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d4752:	b925      	cbnz	r5, d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d4754:	6820      	ldr	r0, [r4, #0]
   d4756:	f001 fbbd 	bl	d5ed4 <_ZN9TCPClient9availableEv>
   d475a:	2800      	cmp	r0, #0
   d475c:	dd11      	ble.n	d4782 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d475e:	4620      	mov	r0, r4
   d4760:	f7ff fe76 	bl	d4450 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d4764:	4605      	mov	r5, r0
   d4766:	2800      	cmp	r0, #0
   d4768:	d1f4      	bne.n	d4754 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d476a:	6820      	ldr	r0, [r4, #0]
   d476c:	f001 fc0c 	bl	d5f88 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d4770:	f000 fbb6 	bl	d4ee0 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d4774:	7f23      	ldrb	r3, [r4, #28]
   d4776:	3b01      	subs	r3, #1
   d4778:	7723      	strb	r3, [r4, #28]
}
   d477a:	4628      	mov	r0, r5
   d477c:	b00c      	add	sp, #48	; 0x30
   d477e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d4782:	f000 fba9 	bl	d4ed8 <_Z11BlynkMillisv>
   d4786:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d4788:	6820      	ldr	r0, [r4, #0]
   d478a:	f001 fa1c 	bl	d5bc6 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d478e:	7f67      	ldrb	r7, [r4, #29]
   d4790:	2f01      	cmp	r7, #1
   d4792:	4605      	mov	r5, r0
   d4794:	d129      	bne.n	d47ea <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d4796:	b920      	cbnz	r0, d47a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d4798:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d479a:	4620      	mov	r0, r4
   d479c:	f7ff fd4e 	bl	d423c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d47a0:	e7e8      	b.n	d4774 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d47a2:	68e3      	ldr	r3, [r4, #12]
   d47a4:	f24f 6218 	movw	r2, #63000	; 0xf618
   d47a8:	1af3      	subs	r3, r6, r3
   d47aa:	4293      	cmp	r3, r2
   d47ac:	d904      	bls.n	d47b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d47ae:	4620      	mov	r0, r4
   d47b0:	f7ff fd44 	bl	d423c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d47b4:	2500      	movs	r5, #0
   d47b6:	e7dd      	b.n	d4774 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d47b8:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   d47bc:	4293      	cmp	r3, r2
   d47be:	d803      	bhi.n	d47c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d47c0:	6923      	ldr	r3, [r4, #16]
   d47c2:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d47c4:	4293      	cmp	r3, r2
   d47c6:	d9bc      	bls.n	d4742 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d47c8:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d47ca:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d47ce:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d47d0:	4293      	cmp	r3, r2
   d47d2:	d9b6      	bls.n	d4742 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d47d4:	2300      	movs	r3, #0
   d47d6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d47da:	9300      	str	r3, [sp, #0]
   d47dc:	461a      	mov	r2, r3
   d47de:	2106      	movs	r1, #6
   d47e0:	4620      	mov	r0, r4
   d47e2:	f000 f8cb 	bl	d497c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d47e6:	6166      	str	r6, [r4, #20]
   d47e8:	e7ab      	b.n	d4742 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d47ea:	2f00      	cmp	r7, #0
   d47ec:	d1a9      	bne.n	d4742 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d47ee:	6962      	ldr	r2, [r4, #20]
   d47f0:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d47f2:	b140      	cbz	r0, d4806 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d47f4:	f241 7370 	movw	r3, #6000	; 0x1770
   d47f8:	429a      	cmp	r2, r3
   d47fa:	d9a2      	bls.n	d4742 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d47fc:	6820      	ldr	r0, [r4, #0]
   d47fe:	f001 fbc3 	bl	d5f88 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4802:	7767      	strb	r7, [r4, #29]
   d4804:	e7d6      	b.n	d47b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d4806:	f241 3388 	movw	r3, #5000	; 0x1388
   d480a:	429a      	cmp	r2, r3
   d480c:	d999      	bls.n	d4742 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d480e:	6820      	ldr	r0, [r4, #0]
   d4810:	f001 fbba 	bl	d5f88 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d4814:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d4818:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d481c:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d4820:	f1be 0f00 	cmp.w	lr, #0
   d4824:	d00b      	beq.n	d483e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d4826:	462b      	mov	r3, r5
   d4828:	4642      	mov	r2, r8
   d482a:	4671      	mov	r1, lr
   d482c:	4660      	mov	r0, ip
   d482e:	f001 fc19 	bl	d6064 <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d4832:	1e43      	subs	r3, r0, #1
   d4834:	425d      	negs	r5, r3
   d4836:	415d      	adcs	r5, r3
   d4838:	b98d      	cbnz	r5, d485e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d483a:	6166      	str	r6, [r4, #20]
                return false;
   d483c:	e79a      	b.n	d4774 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d483e:	4b13      	ldr	r3, [pc, #76]	; (d488c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d4840:	9306      	str	r3, [sp, #24]
   d4842:	f10c 0720 	add.w	r7, ip, #32
   d4846:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4848:	ad07      	add	r5, sp, #28
   d484a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d484c:	683b      	ldr	r3, [r7, #0]
   d484e:	702b      	strb	r3, [r5, #0]
   d4850:	4642      	mov	r2, r8
   d4852:	4673      	mov	r3, lr
   d4854:	a906      	add	r1, sp, #24
   d4856:	4660      	mov	r0, ip
   d4858:	f001 fac1 	bl	d5dde <_ZN9TCPClient7connectE9IPAddresstm>
   d485c:	e7e9      	b.n	d4832 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d485e:	6863      	ldr	r3, [r4, #4]
   d4860:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d4862:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4864:	4618      	mov	r0, r3
            msgIdOut = 1;
   d4866:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4868:	f002 f8c8 	bl	d69fc <strlen>
   d486c:	2200      	movs	r2, #0
   d486e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d4872:	9b05      	ldr	r3, [sp, #20]
   d4874:	9000      	str	r0, [sp, #0]
   d4876:	4632      	mov	r2, r6
   d4878:	211d      	movs	r1, #29
   d487a:	4620      	mov	r0, r4
   d487c:	f000 f87e 	bl	d497c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d4880:	6923      	ldr	r3, [r4, #16]
   d4882:	6163      	str	r3, [r4, #20]
            return true;
   d4884:	e776      	b.n	d4774 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d4886:	2500      	movs	r5, #0
   d4888:	e777      	b.n	d477a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d488a:	bf00      	nop
   d488c:	000d70fc 	.word	0x000d70fc

000d4890 <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d4890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4894:	4615      	mov	r5, r2
   d4896:	b08c      	sub	sp, #48	; 0x30
   d4898:	4604      	mov	r4, r0
   d489a:	3504      	adds	r5, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d489c:	f640 30b8 	movw	r0, #3000	; 0xbb8
    void begin( const char* auth,
   d48a0:	460f      	mov	r7, r1
   d48a2:	4698      	mov	r8, r3
        BlynkDelay(3000); // Give the board time to settle
   d48a4:	f000 fb16 	bl	d4ed4 <_Z10BlynkDelaym>
   d48a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d48aa:	ae01      	add	r6, sp, #4
   d48ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d48ae:	682b      	ldr	r3, [r5, #0]
   d48b0:	7033      	strb	r3, [r6, #0]
        this->authkey = auth;
   d48b2:	6067      	str	r7, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d48b4:	f000 fb10 	bl	d4ed8 <_Z11BlynkMillisv>
   d48b8:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d48bc:	3808      	subs	r0, #8
   d48be:	af01      	add	r7, sp, #4
   d48c0:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d48c4:	6160      	str	r0, [r4, #20]
   d48c6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d48c8:	ae07      	add	r6, sp, #28
   d48ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d48cc:	683b      	ldr	r3, [r7, #0]
   d48ce:	7033      	strb	r3, [r6, #0]
   d48d0:	af07      	add	r7, sp, #28
   d48d2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   d48d4:	6825      	ldr	r5, [r4, #0]
        domain = NULL;
   d48d6:	f04f 0c00 	mov.w	ip, #0
   d48da:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
        port = p;
   d48de:	f8a5 8038 	strh.w	r8, [r5, #56]	; 0x38
   d48e2:	3520      	adds	r5, #32
   d48e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d48e6:	6833      	ldr	r3, [r6, #0]
   d48e8:	702b      	strb	r3, [r5, #0]
        state = CONNECTING;
   d48ea:	4666      	mov	r6, ip
        while ((state != CONNECTED) &&
   d48ec:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   d48f0:	6820      	ldr	r0, [r4, #0]
   d48f2:	f001 fb49 	bl	d5f88 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d48f6:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d48f8:	f000 faee 	bl	d4ed8 <_Z11BlynkMillisv>
   d48fc:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d48fe:	7f63      	ldrb	r3, [r4, #29]
   d4900:	2b01      	cmp	r3, #1
   d4902:	d00c      	beq.n	d491e <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x8e>
               (BlynkMillis() - started < timeout))
   d4904:	f000 fae8 	bl	d4ed8 <_Z11BlynkMillisv>
   d4908:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d490a:	42b8      	cmp	r0, r7
   d490c:	d804      	bhi.n	d4918 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
            run();
   d490e:	2100      	movs	r1, #0
   d4910:	4620      	mov	r0, r4
   d4912:	f7ff ff05 	bl	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d4916:	e7f2      	b.n	d48fe <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
        config(auth, addr, port);
        while(this->connect() != true) {}
   d4918:	7f63      	ldrb	r3, [r4, #29]
   d491a:	2b01      	cmp	r3, #1
   d491c:	d1e8      	bne.n	d48f0 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d491e:	b00c      	add	sp, #48	; 0x30
   d4920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4924 <setup>:
#include "Blynk.h"
#include "LIS3DH.h"
SYSTEM_THREAD(ENABLED);
LIS3DHSPI accel(SPI, A4, WKP);

void setup() {
   d4924:	b500      	push	{lr}
   d4926:	b089      	sub	sp, #36	; 0x24
	Serial.begin(9600);
   d4928:	f001 fd00 	bl	d632c <_Z16_fetch_usbserialv>
   d492c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4930:	f001 fcf0 	bl	d6314 <_ZN9USBSerial5beginEl>
  Blynk.begin("4Oy-pMhtDGrpu_zi1ocegBaiy6ty8yea", IPAddress(167, 172, 234, 162), 9090);
   d4934:	23a2      	movs	r3, #162	; 0xa2
   d4936:	9300      	str	r3, [sp, #0]
   d4938:	22ac      	movs	r2, #172	; 0xac
   d493a:	23ea      	movs	r3, #234	; 0xea
   d493c:	21a7      	movs	r1, #167	; 0xa7
   d493e:	a802      	add	r0, sp, #8
   d4940:	f000 fe9a 	bl	d5678 <_ZN9IPAddressC1Ehhhh>
   d4944:	f242 3382 	movw	r3, #9090	; 0x2382
   d4948:	aa02      	add	r2, sp, #8
   d494a:	4909      	ldr	r1, [pc, #36]	; (d4970 <setup+0x4c>)
   d494c:	4809      	ldr	r0, [pc, #36]	; (d4974 <setup+0x50>)
   d494e:	f7ff ff9f 	bl	d4890 <_ZN13BlynkParticle5beginEPKc9IPAddresst>
	LIS3DHConfig config;
   d4952:	a802      	add	r0, sp, #8
   d4954:	f000 f9e6 	bl	d4d24 <_ZN12LIS3DHConfigC1Ev>
	config.setAccelMode(LIS3DH::RATE_100_HZ);
   d4958:	2150      	movs	r1, #80	; 0x50
   d495a:	a802      	add	r0, sp, #8
   d495c:	f000 f9ef 	bl	d4d3e <_ZN12LIS3DHConfig12setAccelModeEh>
	bool setupSuccess = accel.setup(config);
   d4960:	a902      	add	r1, sp, #8
   d4962:	4805      	ldr	r0, [pc, #20]	; (d4978 <setup+0x54>)
   d4964:	f000 fa5a 	bl	d4e1c <_ZN6LIS3DH5setupER12LIS3DHConfig>
}
   d4968:	b009      	add	sp, #36	; 0x24
   d496a:	f85d fb04 	ldr.w	pc, [sp], #4
   d496e:	bf00      	nop
   d4970:	000d6bac 	.word	0x000d6bac
   d4974:	2003e5cc 	.word	0x2003e5cc
   d4978:	2003e628 	.word	0x2003e628

000d497c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4980:	b083      	sub	sp, #12
   d4982:	af00      	add	r7, sp, #0
   d4984:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d4986:	6800      	ldr	r0, [r0, #0]
   d4988:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d498a:	4688      	mov	r8, r1
   d498c:	4616      	mov	r6, r2
   d498e:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d4990:	46eb      	mov	fp, sp
   d4992:	f001 f918 	bl	d5bc6 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d4996:	2800      	cmp	r0, #0
   d4998:	d07f      	beq.n	d4a9a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d499a:	f1b8 0f1d 	cmp.w	r8, #29
   d499e:	d804      	bhi.n	d49aa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d49a0:	4b4c      	ldr	r3, [pc, #304]	; (d4ad4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d49a2:	fa23 f308 	lsr.w	r3, r3, r8
   d49a6:	07db      	lsls	r3, r3, #31
   d49a8:	d402      	bmi.n	d49b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d49aa:	7f63      	ldrb	r3, [r4, #29]
   d49ac:	2b01      	cmp	r3, #1
   d49ae:	d174      	bne.n	d4a9a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d49b0:	b946      	cbnz	r6, d49c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d49b2:	8b66      	ldrh	r6, [r4, #26]
   d49b4:	b936      	cbnz	r6, d49c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d49b6:	8b23      	ldrh	r3, [r4, #24]
   d49b8:	3301      	adds	r3, #1
   d49ba:	b29b      	uxth	r3, r3
   d49bc:	2b00      	cmp	r3, #0
   d49be:	d071      	beq.n	d4aa4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d49c0:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d49c2:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d49c4:	f1a8 030c 	sub.w	r3, r8, #12
   d49c8:	2b08      	cmp	r3, #8
   d49ca:	d816      	bhi.n	d49fa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d49cc:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d49d0:	4293      	cmp	r3, r2
   d49d2:	bf38      	it	cc
   d49d4:	4613      	movcc	r3, r2
   d49d6:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d49da:	f000 fa7d 	bl	d4ed8 <_Z11BlynkMillisv>
   d49de:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d49e2:	2800      	cmp	r0, #0
   d49e4:	db60      	blt.n	d4aa8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d49e6:	2100      	movs	r1, #0
   d49e8:	4620      	mov	r0, r4
   d49ea:	f7ff fe99 	bl	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d49ee:	f000 fa73 	bl	d4ed8 <_Z11BlynkMillisv>
   d49f2:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d49f6:	2800      	cmp	r0, #0
   d49f8:	daf5      	bge.n	d49e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d49fa:	f1b9 0f00 	cmp.w	r9, #0
   d49fe:	d05a      	beq.n	d4ab6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d4a00:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d4a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d4a04:	2a00      	cmp	r2, #0
   d4a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d4a08:	bf08      	it	eq
   d4a0a:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a0c:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d4a10:	f10a 0307 	add.w	r3, sl, #7
   d4a14:	f023 0307 	bic.w	r3, r3, #7
   d4a18:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d4a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d4a1e:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d4a22:	18ea      	adds	r2, r5, r3
   d4a24:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d4a28:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d4a2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d4a2e:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d4a32:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d4a36:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d4a3a:	f1b9 0f00 	cmp.w	r9, #0
   d4a3e:	d03c      	beq.n	d4aba <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d4a40:	2d00      	cmp	r5, #0
   d4a42:	d03a      	beq.n	d4aba <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d4a44:	462a      	mov	r2, r5
   d4a46:	4649      	mov	r1, r9
   d4a48:	f10d 0005 	add.w	r0, sp, #5
   d4a4c:	f001 ff92 	bl	d6974 <memcpy>
        pos += length;
   d4a50:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d4a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4a54:	b13b      	cbz	r3, d4a66 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d4a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4a58:	b12b      	cbz	r3, d4a66 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d4a5a:	461a      	mov	r2, r3
   d4a5c:	687b      	ldr	r3, [r7, #4]
   d4a5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4a60:	4418      	add	r0, r3
   d4a62:	f001 ff87 	bl	d6974 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4a66:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4a68:	4555      	cmp	r5, sl
   d4a6a:	d22a      	bcs.n	d4ac2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4a6c:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4a70:	687b      	ldr	r3, [r7, #4]
   d4a72:	6820      	ldr	r0, [r4, #0]
   d4a74:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4a78:	bf28      	it	cs
   d4a7a:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4a7e:	1959      	adds	r1, r3, r5
   d4a80:	f001 f88b 	bl	d5b9a <_ZN9TCPClient5writeEPKhj>
   d4a84:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4a86:	2000      	movs	r0, #0
   d4a88:	f000 fa24 	bl	d4ed4 <_Z10BlynkDelaym>
        if (w == 0) {
   d4a8c:	b9be      	cbnz	r6, d4abe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4a8e:	6820      	ldr	r0, [r4, #0]
   d4a90:	f001 fa7a 	bl	d5f88 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4a94:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4a96:	f000 fa23 	bl	d4ee0 <BlynkNoOpCbk>
}
   d4a9a:	370c      	adds	r7, #12
   d4a9c:	46dd      	mov	sp, fp
   d4a9e:	46bd      	mov	sp, r7
   d4aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4aa4:	2301      	movs	r3, #1
   d4aa6:	e78b      	b.n	d49c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4aa8:	7f21      	ldrb	r1, [r4, #28]
   d4aaa:	2900      	cmp	r1, #0
   d4aac:	d1a5      	bne.n	d49fa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4aae:	4620      	mov	r0, r4
   d4ab0:	f7ff fe36 	bl	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4ab4:	e7a1      	b.n	d49fa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4ab6:	2305      	movs	r3, #5
   d4ab8:	e7a3      	b.n	d4a02 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4aba:	2005      	movs	r0, #5
   d4abc:	e7c9      	b.n	d4a52 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4abe:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4ac0:	e7d2      	b.n	d4a68 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4ac2:	d003      	beq.n	d4acc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4ac4:	4620      	mov	r0, r4
   d4ac6:	f7ff fbb9 	bl	d423c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4aca:	e7e6      	b.n	d4a9a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4acc:	f000 fa04 	bl	d4ed8 <_Z11BlynkMillisv>
   d4ad0:	6120      	str	r0, [r4, #16]
   d4ad2:	e7e2      	b.n	d4a9a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4ad4:	20000045 	.word	0x20000045

000d4ad8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4ad8:	b500      	push	{lr}
   d4ada:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4adc:	ab04      	add	r3, sp, #16
   d4ade:	2200      	movs	r2, #0
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	2349      	movs	r3, #73	; 0x49
   d4ae4:	9300      	str	r3, [sp, #0]
   d4ae6:	9202      	str	r2, [sp, #8]
   d4ae8:	4b03      	ldr	r3, [pc, #12]	; (d4af8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4aea:	2111      	movs	r1, #17
   d4aec:	f7ff ff46 	bl	d497c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4af0:	b015      	add	sp, #84	; 0x54
   d4af2:	f85d fb04 	ldr.w	pc, [sp], #4
   d4af6:	bf00      	nop
   d4af8:	000d6bec 	.word	0x000d6bec

000d4afc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJsEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   d4afc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4afe:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4b02:	ab08      	add	r3, sp, #32
   d4b04:	2400      	movs	r4, #0
   d4b06:	4605      	mov	r5, r0
   d4b08:	460f      	mov	r7, r1
   d4b0a:	9305      	str	r3, [sp, #20]
   d4b0c:	a805      	add	r0, sp, #20
   d4b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4b12:	490e      	ldr	r1, [pc, #56]	; (d4b4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJsEEEviDpT_+0x50>)
   d4b14:	4616      	mov	r6, r2
   d4b16:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4b1a:	f7ff fadb 	bl	d40d4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        cmd.add(pin);
   d4b1e:	4639      	mov	r1, r7
   d4b20:	a805      	add	r0, sp, #20
   d4b22:	f7ff fb67 	bl	d41f4 <_ZN10BlynkParam3addEi>
        add(last);
   d4b26:	4631      	mov	r1, r6
   d4b28:	a805      	add	r0, sp, #20
   d4b2a:	f7ff fb63 	bl	d41f4 <_ZN10BlynkParam3addEi>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4b2e:	9b06      	ldr	r3, [sp, #24]
   d4b30:	3b01      	subs	r3, #1
   d4b32:	9300      	str	r3, [sp, #0]
   d4b34:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4b38:	9b05      	ldr	r3, [sp, #20]
   d4b3a:	4622      	mov	r2, r4
   d4b3c:	2114      	movs	r1, #20
   d4b3e:	4628      	mov	r0, r5
   d4b40:	f7ff ff1c 	bl	d497c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4b44:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b4a:	bf00      	nop
   d4b4c:	000d6bcd 	.word	0x000d6bcd

000d4b50 <loop>:

void loop() {
   d4b50:	b507      	push	{r0, r1, r2, lr}
  Blynk.run();
   d4b52:	2100      	movs	r1, #0
   d4b54:	480f      	ldr	r0, [pc, #60]	; (d4b94 <loop+0x44>)
   d4b56:	f7ff fde3 	bl	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
	LIS3DHSample sample;
	if (accel.getSample(sample)) {
   d4b5a:	480f      	ldr	r0, [pc, #60]	; (d4b98 <loop+0x48>)
   d4b5c:	4669      	mov	r1, sp
   d4b5e:	f000 f927 	bl	d4db0 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
   d4b62:	b188      	cbz	r0, d4b88 <loop+0x38>
    Blynk.virtualWrite(V0, sample.x);
   d4b64:	f9bd 2000 	ldrsh.w	r2, [sp]
   d4b68:	480a      	ldr	r0, [pc, #40]	; (d4b94 <loop+0x44>)
   d4b6a:	2100      	movs	r1, #0
   d4b6c:	f7ff ffc6 	bl	d4afc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJsEEEviDpT_>
    Blynk.virtualWrite(V1, sample.y);
   d4b70:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
   d4b74:	4807      	ldr	r0, [pc, #28]	; (d4b94 <loop+0x44>)
   d4b76:	2101      	movs	r1, #1
   d4b78:	f7ff ffc0 	bl	d4afc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJsEEEviDpT_>
    Blynk.virtualWrite(V2, sample.z);
   d4b7c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
   d4b80:	4804      	ldr	r0, [pc, #16]	; (d4b94 <loop+0x44>)
   d4b82:	2102      	movs	r1, #2
   d4b84:	f7ff ffba 	bl	d4afc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJsEEEviDpT_>
	}
  delay(100);
   d4b88:	2064      	movs	r0, #100	; 0x64
   d4b8a:	f000 fc53 	bl	d5434 <delay>
}
   d4b8e:	b003      	add	sp, #12
   d4b90:	f85d fb04 	ldr.w	pc, [sp], #4
   d4b94:	2003e5cc 	.word	0x2003e5cc
   d4b98:	2003e628 	.word	0x2003e628

000d4b9c <_GLOBAL__sub_I_Blynk>:
   d4b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : domain(NULL), port(0)
   d4b9e:	4d26      	ldr	r5, [pc, #152]	; (d4c38 <_GLOBAL__sub_I_Blynk+0x9c>)
   d4ba0:	4628      	mov	r0, r5
   d4ba2:	2400      	movs	r4, #0
   d4ba4:	f001 fa3a 	bl	d601c <_ZN9TCPClientC1Ev>
   d4ba8:	f105 001c 	add.w	r0, r5, #28
   d4bac:	f000 fd20 	bl	d55f0 <_ZN9IPAddressC1Ev>
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4bb0:	4a22      	ldr	r2, [pc, #136]	; (d4c3c <_GLOBAL__sub_I_Blynk+0xa0>)
   d4bb2:	636c      	str	r4, [r5, #52]	; 0x34
   d4bb4:	872c      	strh	r4, [r5, #56]	; 0x38
   d4bb6:	4922      	ldr	r1, [pc, #136]	; (d4c40 <_GLOBAL__sub_I_Blynk+0xa4>)
   d4bb8:	4628      	mov	r0, r5
   d4bba:	f001 fda9 	bl	d6710 <__aeabi_atexit>
        , state(CONNECTING)
   d4bbe:	4b21      	ldr	r3, [pc, #132]	; (d4c44 <_GLOBAL__sub_I_Blynk+0xa8>)
SYSTEM_THREAD(ENABLED);
   d4bc0:	4621      	mov	r1, r4
   d4bc2:	e9c3 5400 	strd	r5, r4, [r3]
   d4bc6:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d4bca:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4bce:	619c      	str	r4, [r3, #24]
   d4bd0:	839c      	strh	r4, [r3, #28]

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   d4bd2:	4c1d      	ldr	r4, [pc, #116]	; (d4c48 <_GLOBAL__sub_I_Blynk+0xac>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4bd4:	4d1d      	ldr	r5, [pc, #116]	; (d4c4c <_GLOBAL__sub_I_Blynk+0xb0>)
   d4bd6:	2001      	movs	r0, #1
   d4bd8:	f000 fb70 	bl	d52bc <system_thread_set_state>
   d4bdc:	2108      	movs	r1, #8
   d4bde:	4620      	mov	r0, r4
   d4be0:	f000 f8b8 	bl	d4d54 <_ZN6LIS3DHC1Ei>
   d4be4:	4b1a      	ldr	r3, [pc, #104]	; (d4c50 <_GLOBAL__sub_I_Blynk+0xb4>)
   d4be6:	6023      	str	r3, [r4, #0]
   d4be8:	7829      	ldrb	r1, [r5, #0]
   d4bea:	f3bf 8f5b 	dmb	ish
   d4bee:	f011 0101 	ands.w	r1, r1, #1
   d4bf2:	d10b      	bne.n	d4c0c <_GLOBAL__sub_I_Blynk+0x70>
   d4bf4:	4628      	mov	r0, r5
   d4bf6:	9101      	str	r1, [sp, #4]
   d4bf8:	f7ff fa5c 	bl	d40b4 <__cxa_guard_acquire>
   d4bfc:	9901      	ldr	r1, [sp, #4]
   d4bfe:	b128      	cbz	r0, d4c0c <_GLOBAL__sub_I_Blynk+0x70>
   d4c00:	4814      	ldr	r0, [pc, #80]	; (d4c54 <_GLOBAL__sub_I_Blynk+0xb8>)
   d4c02:	f000 febf 	bl	d5984 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4c06:	4628      	mov	r0, r5
   d4c08:	f7ff fa59 	bl	d40be <__cxa_guard_release>
   d4c0c:	4b11      	ldr	r3, [pc, #68]	; (d4c54 <_GLOBAL__sub_I_Blynk+0xb8>)
   d4c0e:	60e3      	str	r3, [r4, #12]
   d4c10:	230f      	movs	r3, #15
      dataMode_{dataMode}
   d4c12:	4a11      	ldr	r2, [pc, #68]	; (d4c58 <_GLOBAL__sub_I_Blynk+0xbc>)
   d4c14:	6123      	str	r3, [r4, #16]
   d4c16:	2300      	movs	r3, #0
   d4c18:	7523      	strb	r3, [r4, #20]
   d4c1a:	61a2      	str	r2, [r4, #24]
   d4c1c:	7723      	strb	r3, [r4, #28]
LIS3DHSPI accel(SPI, A4, WKP);
   d4c1e:	4a07      	ldr	r2, [pc, #28]	; (d4c3c <_GLOBAL__sub_I_Blynk+0xa0>)
   d4c20:	4b0e      	ldr	r3, [pc, #56]	; (d4c5c <_GLOBAL__sub_I_Blynk+0xc0>)
   d4c22:	490f      	ldr	r1, [pc, #60]	; (d4c60 <_GLOBAL__sub_I_Blynk+0xc4>)
   d4c24:	4808      	ldr	r0, [pc, #32]	; (d4c48 <_GLOBAL__sub_I_Blynk+0xac>)
   d4c26:	6223      	str	r3, [r4, #32]
   d4c28:	2301      	movs	r3, #1
   d4c2a:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   d4c2c:	b003      	add	sp, #12
   d4c2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
LIS3DHSPI accel(SPI, A4, WKP);
   d4c32:	f001 bd6d 	b.w	d6710 <__aeabi_atexit>
   d4c36:	bf00      	nop
   d4c38:	2003e5ec 	.word	0x2003e5ec
   d4c3c:	2003e5bc 	.word	0x2003e5bc
   d4c40:	000d4105 	.word	0x000d4105
   d4c44:	2003e5cc 	.word	0x2003e5cc
   d4c48:	2003e628 	.word	0x2003e628
   d4c4c:	2003e5c0 	.word	0x2003e5c0
   d4c50:	000d6c6c 	.word	0x000d6c6c
   d4c54:	2003e5c4 	.word	0x2003e5c4
   d4c58:	000d6bd8 	.word	0x000d6bd8
   d4c5c:	00989680 	.word	0x00989680
   d4c60:	000d4c65 	.word	0x000d4c65

000d4c64 <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   d4c64:	4770      	bx	lr

000d4c66 <_ZN9LIS3DHSPID0Ev>:
LIS3DHSPI::~LIS3DHSPI() {
   d4c66:	b510      	push	{r4, lr}
}
   d4c68:	2128      	movs	r1, #40	; 0x28
LIS3DHSPI::~LIS3DHSPI() {
   d4c6a:	4604      	mov	r4, r0
}
   d4c6c:	f001 fd55 	bl	d671a <_ZdlPvj>
   d4c70:	4620      	mov	r0, r4
   d4c72:	bd10      	pop	{r4, pc}

000d4c74 <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   d4c74:	b510      	push	{r4, lr}
   d4c76:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   d4c78:	f100 0118 	add.w	r1, r0, #24
   d4c7c:	68c0      	ldr	r0, [r0, #12]
   d4c7e:	f000 feb7 	bl	d59f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

	digitalWrite(ss, LOW);
   d4c82:	8a20      	ldrh	r0, [r4, #16]
   d4c84:	2100      	movs	r1, #0
}
   d4c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(ss, LOW);
   d4c8a:	f001 bc98 	b.w	d65be <digitalWrite>

000d4c8e <_ZN9LIS3DHSPI14endTransactionEv>:

void LIS3DHSPI::endTransaction() {
   d4c8e:	b510      	push	{r4, lr}
   d4c90:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   d4c92:	2101      	movs	r1, #1
   d4c94:	8a00      	ldrh	r0, [r0, #16]
   d4c96:	f001 fc92 	bl	d65be <digitalWrite>

	spi.endTransaction();
   d4c9a:	68e0      	ldr	r0, [r4, #12]
}
   d4c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
   d4ca0:	f000 be8d 	b.w	d59be <_ZN8SPIClass14endTransactionEv>

000d4ca4 <_ZN9LIS3DHSPI8readDataEhPhj>:

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d4ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ca6:	461e      	mov	r6, r3
	beginTransaction();
   d4ca8:	6803      	ldr	r3, [r0, #0]
   d4caa:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d4cac:	460f      	mov	r7, r1
   d4cae:	4614      	mov	r4, r2
   d4cb0:	4605      	mov	r5, r0
	beginTransaction();
   d4cb2:	4798      	blx	r3

	if (numBytes > 1) {
   d4cb4:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d4cb6:	bf88      	it	hi
   d4cb8:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   d4cbc:	68e8      	ldr	r0, [r5, #12]
   d4cbe:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d4cc2:	f000 ff03 	bl	d5acc <_ZN8SPIClass8transferEh>

	for(size_t ii = 0; ii < numBytes; ii++) {
   d4cc6:	4426      	add	r6, r4
   d4cc8:	42b4      	cmp	r4, r6
   d4cca:	d006      	beq.n	d4cda <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   d4ccc:	68e8      	ldr	r0, [r5, #12]
   d4cce:	2100      	movs	r1, #0
   d4cd0:	f000 fefc 	bl	d5acc <_ZN8SPIClass8transferEh>
   d4cd4:	f804 0b01 	strb.w	r0, [r4], #1
	for(size_t ii = 0; ii < numBytes; ii++) {
   d4cd8:	e7f6      	b.n	d4cc8 <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
	}

	endTransaction();
   d4cda:	682b      	ldr	r3, [r5, #0]
   d4cdc:	4628      	mov	r0, r5
   d4cde:	699b      	ldr	r3, [r3, #24]
   d4ce0:	4798      	blx	r3

	return true;
}
   d4ce2:	2001      	movs	r0, #1
   d4ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ce6 <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d4ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ce8:	461e      	mov	r6, r3
	beginTransaction();
   d4cea:	6803      	ldr	r3, [r0, #0]
   d4cec:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d4cee:	460f      	mov	r7, r1
   d4cf0:	4614      	mov	r4, r2
   d4cf2:	4605      	mov	r5, r0
	beginTransaction();
   d4cf4:	4798      	blx	r3

	if (numBytes > 1) {
   d4cf6:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d4cf8:	bf88      	it	hi
   d4cfa:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   d4cfe:	68e8      	ldr	r0, [r5, #12]
   d4d00:	4639      	mov	r1, r7
   d4d02:	f000 fee3 	bl	d5acc <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d4d06:	4426      	add	r6, r4
   d4d08:	42b4      	cmp	r4, r6
   d4d0a:	d005      	beq.n	d4d18 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   d4d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4d10:	68e8      	ldr	r0, [r5, #12]
   d4d12:	f000 fedb 	bl	d5acc <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d4d16:	e7f7      	b.n	d4d08 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
	}

	endTransaction();
   d4d18:	682b      	ldr	r3, [r5, #0]
   d4d1a:	4628      	mov	r0, r5
   d4d1c:	699b      	ldr	r3, [r3, #24]
   d4d1e:	4798      	blx	r3

	return true;
}
   d4d20:	2001      	movs	r0, #1
   d4d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d24 <_ZN12LIS3DHConfigC1Ev>:
LIS3DHConfig::LIS3DHConfig() {
   d4d24:	2200      	movs	r2, #0
   d4d26:	7002      	strb	r2, [r0, #0]
   d4d28:	7042      	strb	r2, [r0, #1]
   d4d2a:	7082      	strb	r2, [r0, #2]
   d4d2c:	70c2      	strb	r2, [r0, #3]
   d4d2e:	7102      	strb	r2, [r0, #4]
   d4d30:	7142      	strb	r2, [r0, #5]
   d4d32:	7182      	strb	r2, [r0, #6]
   d4d34:	71c2      	strb	r2, [r0, #7]
   d4d36:	7202      	strb	r2, [r0, #8]
   d4d38:	7242      	strb	r2, [r0, #9]
   d4d3a:	7282      	strb	r2, [r0, #10]
}
   d4d3c:	4770      	bx	lr

000d4d3e <_ZN12LIS3DHConfig12setAccelModeEh>:
	reg2 = reg3 = reg5 = 0;
   d4d3e:	2200      	movs	r2, #0
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
   d4d40:	f041 0107 	orr.w	r1, r1, #7
   d4d44:	7001      	strb	r1, [r0, #0]
	reg2 = reg3 = reg5 = 0;
   d4d46:	7102      	strb	r2, [r0, #4]
   d4d48:	7082      	strb	r2, [r0, #2]
   d4d4a:	7042      	strb	r2, [r0, #1]
	int1_ths = 0;
   d4d4c:	71c2      	strb	r2, [r0, #7]
	int1_cfg = 0;
   d4d4e:	7242      	strb	r2, [r0, #9]
}
   d4d50:	4770      	bx	lr
	...

000d4d54 <_ZN6LIS3DHC1Ei>:
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   d4d54:	4a02      	ldr	r2, [pc, #8]	; (d4d60 <_ZN6LIS3DHC1Ei+0xc>)
   d4d56:	e9c0 2100 	strd	r2, r1, [r0]
   d4d5a:	2200      	movs	r2, #0
   d4d5c:	7202      	strb	r2, [r0, #8]
}
   d4d5e:	4770      	bx	lr
   d4d60:	000d6c50 	.word	0x000d6c50

000d4d64 <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   d4d64:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   d4d66:	6803      	ldr	r3, [r0, #0]
   d4d68:	aa01      	add	r2, sp, #4
   d4d6a:	68dc      	ldr	r4, [r3, #12]
   d4d6c:	2301      	movs	r3, #1
   d4d6e:	47a0      	blx	r4
}
   d4d70:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4d74:	b002      	add	sp, #8
   d4d76:	bd10      	pop	{r4, pc}

000d4d78 <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   d4d78:	b538      	push	{r3, r4, r5, lr}
   d4d7a:	4605      	mov	r5, r0
   d4d7c:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   d4d7e:	210f      	movs	r1, #15
   d4d80:	4628      	mov	r0, r5
   d4d82:	f7ff ffef 	bl	d4d64 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   d4d86:	2833      	cmp	r0, #51	; 0x33
			found = true;
   d4d88:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   d4d8c:	d004      	beq.n	d4d98 <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   d4d8e:	f000 fb51 	bl	d5434 <delay>
	for(int tries = 0; tries < 10; tries++) {
   d4d92:	3c01      	subs	r4, #1
   d4d94:	d1f3      	bne.n	d4d7e <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   d4d96:	4620      	mov	r0, r4
}
   d4d98:	bd38      	pop	{r3, r4, r5, pc}

000d4d9a <_ZN9LIS3DHSPI9hasDeviceEv>:
bool LIS3DHSPI::hasDevice() {
   d4d9a:	b510      	push	{r4, lr}
   d4d9c:	4604      	mov	r4, r0
	spi.begin(ss);
   d4d9e:	8a01      	ldrh	r1, [r0, #16]
   d4da0:	68c0      	ldr	r0, [r0, #12]
   d4da2:	f000 fdf9 	bl	d5998 <_ZN8SPIClass5beginEt>
	return LIS3DH::hasDevice();
   d4da6:	4620      	mov	r0, r4
}
   d4da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LIS3DH::hasDevice();
   d4dac:	f7ff bfe4 	b.w	d4d78 <_ZN6LIS3DH9hasDeviceEv>

000d4db0 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:
bool LIS3DH::getSample(LIS3DHSample &sample) {
   d4db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4db2:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   d4db4:	2127      	movs	r1, #39	; 0x27
bool LIS3DH::getSample(LIS3DHSample &sample) {
   d4db6:	4605      	mov	r5, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   d4db8:	f7ff ffd4 	bl	d4d64 <_ZN6LIS3DH13readRegister8Eh>
	bool hasData = ((statusAuxReg & STATUS_ZYXDA) != 0);
   d4dbc:	f000 0008 	and.w	r0, r0, #8
   d4dc0:	2800      	cmp	r0, #0
   d4dc2:	bf14      	ite	ne
   d4dc4:	2601      	movne	r6, #1
   d4dc6:	2600      	moveq	r6, #0
	if (hasData) {
   d4dc8:	d01b      	beq.n	d4e02 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		readData(REG_OUT_X_L, resp, sizeof(resp));
   d4dca:	682b      	ldr	r3, [r5, #0]
   d4dcc:	466a      	mov	r2, sp
   d4dce:	68df      	ldr	r7, [r3, #12]
   d4dd0:	2128      	movs	r1, #40	; 0x28
   d4dd2:	2306      	movs	r3, #6
   d4dd4:	4628      	mov	r0, r5
   d4dd6:	47b8      	blx	r7
		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
   d4dd8:	f89d 2001 	ldrb.w	r2, [sp, #1]
   d4ddc:	f89d 3000 	ldrb.w	r3, [sp]
   d4de0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4de4:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
   d4de6:	f89d 2003 	ldrb.w	r2, [sp, #3]
   d4dea:	f89d 3002 	ldrb.w	r3, [sp, #2]
   d4dee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4df2:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
   d4df4:	f89d 2005 	ldrb.w	r2, [sp, #5]
   d4df8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4dfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4e00:	80a3      	strh	r3, [r4, #4]
}
   d4e02:	4630      	mov	r0, r6
   d4e04:	b003      	add	sp, #12
   d4e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4e08 <_ZN6LIS3DH14writeRegister8Ehh>:
void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
   d4e08:	b513      	push	{r0, r1, r4, lr}
	writeData(addr, req, sizeof(req));
   d4e0a:	6803      	ldr	r3, [r0, #0]
	req[0] = value;
   d4e0c:	f88d 2004 	strb.w	r2, [sp, #4]
	writeData(addr, req, sizeof(req));
   d4e10:	691c      	ldr	r4, [r3, #16]
   d4e12:	aa01      	add	r2, sp, #4
   d4e14:	2301      	movs	r3, #1
   d4e16:	47a0      	blx	r4
}
   d4e18:	b002      	add	sp, #8
   d4e1a:	bd10      	pop	{r4, pc}

000d4e1c <_ZN6LIS3DH5setupER12LIS3DHConfig>:
bool LIS3DH::setup(LIS3DHConfig &config) {
   d4e1c:	b570      	push	{r4, r5, r6, lr}
	if (!hasDevice()) {
   d4e1e:	6803      	ldr	r3, [r0, #0]
   d4e20:	689b      	ldr	r3, [r3, #8]
bool LIS3DH::setup(LIS3DHConfig &config) {
   d4e22:	4604      	mov	r4, r0
   d4e24:	460d      	mov	r5, r1
	if (!hasDevice()) {
   d4e26:	4798      	blx	r3
   d4e28:	4606      	mov	r6, r0
   d4e2a:	b930      	cbnz	r0, d4e3a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1e>
		Serial.println("device not found");
   d4e2c:	f001 fa7e 	bl	d632c <_Z16_fetch_usbserialv>
   d4e30:	4927      	ldr	r1, [pc, #156]	; (d4ed0 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
   d4e32:	f000 fd34 	bl	d589e <_ZN5Print7printlnEPKc>
}
   d4e36:	4630      	mov	r0, r6
   d4e38:	bd70      	pop	{r4, r5, r6, pc}
	writeRegister8(REG_CTRL_REG1, config.reg1);
   d4e3a:	782a      	ldrb	r2, [r5, #0]
   d4e3c:	2120      	movs	r1, #32
   d4e3e:	4620      	mov	r0, r4
   d4e40:	f7ff ffe2 	bl	d4e08 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
   d4e44:	786a      	ldrb	r2, [r5, #1]
   d4e46:	2121      	movs	r1, #33	; 0x21
   d4e48:	4620      	mov	r0, r4
   d4e4a:	f7ff ffdd 	bl	d4e08 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
   d4e4e:	78aa      	ldrb	r2, [r5, #2]
   d4e50:	2122      	movs	r1, #34	; 0x22
   d4e52:	4620      	mov	r0, r4
   d4e54:	f7ff ffd8 	bl	d4e08 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
   d4e58:	78ea      	ldrb	r2, [r5, #3]
   d4e5a:	2123      	movs	r1, #35	; 0x23
   d4e5c:	4620      	mov	r0, r4
   d4e5e:	f7ff ffd3 	bl	d4e08 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
   d4e62:	792a      	ldrb	r2, [r5, #4]
   d4e64:	2124      	movs	r1, #36	; 0x24
   d4e66:	4620      	mov	r0, r4
   d4e68:	f7ff ffce 	bl	d4e08 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
   d4e6c:	796a      	ldrb	r2, [r5, #5]
   d4e6e:	2125      	movs	r1, #37	; 0x25
   d4e70:	4620      	mov	r0, r4
   d4e72:	f7ff ffc9 	bl	d4e08 <_ZN6LIS3DH14writeRegister8Ehh>
	if (config.setReference) {
   d4e76:	79ab      	ldrb	r3, [r5, #6]
   d4e78:	b11b      	cbz	r3, d4e82 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x66>
		readRegister8(REG_REFERENCE);
   d4e7a:	2126      	movs	r1, #38	; 0x26
   d4e7c:	4620      	mov	r0, r4
   d4e7e:	f7ff ff71 	bl	d4d64 <_ZN6LIS3DH13readRegister8Eh>
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
   d4e82:	7aaa      	ldrb	r2, [r5, #10]
   d4e84:	212e      	movs	r1, #46	; 0x2e
   d4e86:	4620      	mov	r0, r4
   d4e88:	f7ff ffbe 	bl	d4e08 <_ZN6LIS3DH14writeRegister8Ehh>
	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
   d4e8c:	78ab      	ldrb	r3, [r5, #2]
   d4e8e:	065b      	lsls	r3, r3, #25
   d4e90:	d5d1      	bpl.n	d4e36 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		writeRegister8(REG_INT1_THS, config.int1_ths);
   d4e92:	79ea      	ldrb	r2, [r5, #7]
   d4e94:	2132      	movs	r1, #50	; 0x32
   d4e96:	4620      	mov	r0, r4
   d4e98:	f7ff ffb6 	bl	d4e08 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
   d4e9c:	7a2a      	ldrb	r2, [r5, #8]
   d4e9e:	2133      	movs	r1, #51	; 0x33
   d4ea0:	4620      	mov	r0, r4
   d4ea2:	f7ff ffb1 	bl	d4e08 <_ZN6LIS3DH14writeRegister8Ehh>
		if (intPin >= 0) {
   d4ea6:	6863      	ldr	r3, [r4, #4]
   d4ea8:	2b00      	cmp	r3, #0
   d4eaa:	db0a      	blt.n	d4ec2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa6>
			int1_cfg = config.int1_cfg;
   d4eac:	7a6a      	ldrb	r2, [r5, #9]
   d4eae:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
   d4eb0:	4620      	mov	r0, r4
   d4eb2:	2130      	movs	r1, #48	; 0x30
   d4eb4:	f7ff ffa8 	bl	d4e08 <_ZN6LIS3DH14writeRegister8Ehh>
			readRegister8(REG_INT1_SRC);
   d4eb8:	2131      	movs	r1, #49	; 0x31
   d4eba:	4620      	mov	r0, r4
   d4ebc:	f7ff ff52 	bl	d4d64 <_ZN6LIS3DH13readRegister8Eh>
   d4ec0:	e7b9      	b.n	d4e36 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
			int1_cfg = 0;
   d4ec2:	2200      	movs	r2, #0
   d4ec4:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
   d4ec6:	2130      	movs	r1, #48	; 0x30
   d4ec8:	4620      	mov	r0, r4
   d4eca:	f7ff ff9d 	bl	d4e08 <_ZN6LIS3DH14writeRegister8Ehh>
   d4ece:	e7b2      	b.n	d4e36 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
   d4ed0:	000d6c37 	.word	0x000d6c37

000d4ed4 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d4ed4:	f000 baae 	b.w	d5434 <delay>

000d4ed8 <_Z11BlynkMillisv>:

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4ed8:	f000 b838 	b.w	d4f4c <HAL_Timer_Get_Milli_Seconds>

000d4edc <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d4edc:	4770      	bx	lr

000d4ede <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d4ede:	4770      	bx	lr

000d4ee0 <BlynkNoOpCbk>:
{}
   d4ee0:	4770      	bx	lr
	...

000d4ee4 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d4ee4:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d4ee6:	bf5a      	itte	pl
   d4ee8:	4b02      	ldrpl	r3, [pc, #8]	; (d4ef4 <GetReadHandler+0x10>)
   d4eea:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d4eee:	2000      	movmi	r0, #0
#endif
}
   d4ef0:	4770      	bx	lr
   d4ef2:	bf00      	nop
   d4ef4:	000d6c88 	.word	0x000d6c88

000d4ef8 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d4ef8:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d4efa:	bf5a      	itte	pl
   d4efc:	4b02      	ldrpl	r3, [pc, #8]	; (d4f08 <GetWriteHandler+0x10>)
   d4efe:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d4f02:	2000      	movmi	r0, #0
#endif
}
   d4f04:	4770      	bx	lr
   d4f06:	bf00      	nop
   d4f08:	000d6e88 	.word	0x000d6e88

000d4f0c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <os_mutex_recursive_create+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	00030248 	.word	0x00030248

000d4f1c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <os_mutex_recursive_destroy+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	00030248 	.word	0x00030248

000d4f2c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <HAL_RNG_GetRandomNumber+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	685b      	ldr	r3, [r3, #4]
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	00030218 	.word	0x00030218

000d4f3c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4f3c:	b508      	push	{r3, lr}
   d4f3e:	4b02      	ldr	r3, [pc, #8]	; (d4f48 <HAL_Delay_Microseconds+0xc>)
   d4f40:	681b      	ldr	r3, [r3, #0]
   d4f42:	68db      	ldr	r3, [r3, #12]
   d4f44:	9301      	str	r3, [sp, #4]
   d4f46:	bd08      	pop	{r3, pc}
   d4f48:	00030218 	.word	0x00030218

000d4f4c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	695b      	ldr	r3, [r3, #20]
   d4f54:	9301      	str	r3, [sp, #4]
   d4f56:	bd08      	pop	{r3, pc}
   d4f58:	00030218 	.word	0x00030218

000d4f5c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <HAL_Validate_Pin_Function+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	685b      	ldr	r3, [r3, #4]
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	0003022c 	.word	0x0003022c

000d4f6c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <HAL_Pin_Mode+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	689b      	ldr	r3, [r3, #8]
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	0003022c 	.word	0x0003022c

000d4f7c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <HAL_Get_Pin_Mode+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	68db      	ldr	r3, [r3, #12]
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	0003022c 	.word	0x0003022c

000d4f8c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <HAL_GPIO_Write+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	691b      	ldr	r3, [r3, #16]
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	0003022c 	.word	0x0003022c

000d4f9c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <HAL_GPIO_Read+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	695b      	ldr	r3, [r3, #20]
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	0003022c 	.word	0x0003022c

000d4fac <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <HAL_DAC_Write+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	0003022c 	.word	0x0003022c

000d4fbc <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <hal_adc_read+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	0003022c 	.word	0x0003022c

000d4fcc <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <hal_pwm_write_ext+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	0003022c 	.word	0x0003022c

000d4fdc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <hal_i2c_write+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	6a1b      	ldr	r3, [r3, #32]
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	00030228 	.word	0x00030228

000d4fec <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <hal_i2c_available+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	00030228 	.word	0x00030228

000d4ffc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <hal_i2c_read+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	00030228 	.word	0x00030228

000d500c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <hal_i2c_peek+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	00030228 	.word	0x00030228

000d501c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <hal_i2c_flush+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	00030228 	.word	0x00030228

000d502c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <hal_i2c_is_enabled+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	00030228 	.word	0x00030228

000d503c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <hal_i2c_init+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	00030228 	.word	0x00030228

000d504c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <if_index_to_name+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	695b      	ldr	r3, [r3, #20]
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	0003026c 	.word	0x0003026c

000d505c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <inet_inet_ntop+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	695b      	ldr	r3, [r3, #20]
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	00030264 	.word	0x00030264

000d506c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <inet_htonl+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	6a1b      	ldr	r3, [r3, #32]
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	00030264 	.word	0x00030264

000d507c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <inet_htons+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	00030264 	.word	0x00030264

000d508c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <netdb_freeaddrinfo+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	689b      	ldr	r3, [r3, #8]
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	00030268 	.word	0x00030268

000d509c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <netdb_getaddrinfo+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	68db      	ldr	r3, [r3, #12]
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	00030268 	.word	0x00030268

000d50ac <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <sock_setsockopt+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	699b      	ldr	r3, [r3, #24]
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	00030238 	.word	0x00030238

000d50bc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <sock_close+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	69db      	ldr	r3, [r3, #28]
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	00030238 	.word	0x00030238

000d50cc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <sock_connect+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	6a1b      	ldr	r3, [r3, #32]
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	00030238 	.word	0x00030238

000d50dc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <sock_recv+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	00030238 	.word	0x00030238

000d50ec <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <sock_send+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	00030238 	.word	0x00030238

000d50fc <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <sock_socket+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	00030238 	.word	0x00030238

000d510c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <hal_spi_begin+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	681b      	ldr	r3, [r3, #0]
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	00030230 	.word	0x00030230

000d511c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <hal_spi_transfer+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	695b      	ldr	r3, [r3, #20]
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	00030230 	.word	0x00030230

000d512c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <hal_spi_init+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	69db      	ldr	r3, [r3, #28]
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	00030230 	.word	0x00030230

000d513c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <hal_spi_is_enabled+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	6a1b      	ldr	r3, [r3, #32]
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	00030230 	.word	0x00030230

000d514c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <hal_spi_info+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	00030230 	.word	0x00030230

000d515c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <hal_spi_set_settings+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	00030230 	.word	0x00030230

000d516c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <hal_spi_acquire+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	00030230 	.word	0x00030230

000d517c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <hal_spi_release+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	00030230 	.word	0x00030230

000d518c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <hal_usart_init+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	681b      	ldr	r3, [r3, #0]
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	0003023c 	.word	0x0003023c

000d519c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <hal_usart_write+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	68db      	ldr	r3, [r3, #12]
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	0003023c 	.word	0x0003023c

000d51ac <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <hal_usart_available+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	691b      	ldr	r3, [r3, #16]
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	0003023c 	.word	0x0003023c

000d51bc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <hal_usart_read+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	695b      	ldr	r3, [r3, #20]
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	0003023c 	.word	0x0003023c

000d51cc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <hal_usart_peek+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	699b      	ldr	r3, [r3, #24]
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	0003023c 	.word	0x0003023c

000d51dc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <hal_usart_flush+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	69db      	ldr	r3, [r3, #28]
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	0003023c 	.word	0x0003023c

000d51ec <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <hal_usart_is_enabled+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	6a1b      	ldr	r3, [r3, #32]
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	0003023c 	.word	0x0003023c

000d51fc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <hal_usart_available_data_for_write+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	0003023c 	.word	0x0003023c

000d520c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <HAL_USB_USART_Init+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	681b      	ldr	r3, [r3, #0]
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	0003024c 	.word	0x0003024c

000d521c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <HAL_USB_USART_Begin+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	685b      	ldr	r3, [r3, #4]
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	0003024c 	.word	0x0003024c

000d522c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <HAL_USB_USART_Available_Data+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	691b      	ldr	r3, [r3, #16]
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	0003024c 	.word	0x0003024c

000d523c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	695b      	ldr	r3, [r3, #20]
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	0003024c 	.word	0x0003024c

000d524c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d524c:	b508      	push	{r3, lr}
   d524e:	4b02      	ldr	r3, [pc, #8]	; (d5258 <HAL_USB_USART_Receive_Data+0xc>)
   d5250:	681b      	ldr	r3, [r3, #0]
   d5252:	699b      	ldr	r3, [r3, #24]
   d5254:	9301      	str	r3, [sp, #4]
   d5256:	bd08      	pop	{r3, pc}
   d5258:	0003024c 	.word	0x0003024c

000d525c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d525c:	b508      	push	{r3, lr}
   d525e:	4b02      	ldr	r3, [pc, #8]	; (d5268 <HAL_USB_USART_Send_Data+0xc>)
   d5260:	681b      	ldr	r3, [r3, #0]
   d5262:	69db      	ldr	r3, [r3, #28]
   d5264:	9301      	str	r3, [sp, #4]
   d5266:	bd08      	pop	{r3, pc}
   d5268:	0003024c 	.word	0x0003024c

000d526c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b02      	ldr	r3, [pc, #8]	; (d5278 <HAL_USB_USART_Flush_Data+0xc>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	6a1b      	ldr	r3, [r3, #32]
   d5274:	9301      	str	r3, [sp, #4]
   d5276:	bd08      	pop	{r3, pc}
   d5278:	0003024c 	.word	0x0003024c

000d527c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <panic_+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	00030260 	.word	0x00030260

000d528c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <log_message+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	00030260 	.word	0x00030260

000d529c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <set_system_mode+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	685b      	ldr	r3, [r3, #4]
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	00030220 	.word	0x00030220

000d52ac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <system_delay_ms+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	695b      	ldr	r3, [r3, #20]
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	00030220 	.word	0x00030220

000d52bc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <system_thread_set_state+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	00030220 	.word	0x00030220

000d52cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b03      	ldr	r3, [pc, #12]	; (d52dc <system_ctrl_set_app_request_handler+0x10>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d52d6:	9301      	str	r3, [sp, #4]
   d52d8:	bd08      	pop	{r3, pc}
   d52da:	0000      	.short	0x0000
   d52dc:	00030220 	.word	0x00030220

000d52e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d52e0:	b508      	push	{r3, lr}
   d52e2:	4b03      	ldr	r3, [pc, #12]	; (d52f0 <system_ctrl_set_result+0x10>)
   d52e4:	681b      	ldr	r3, [r3, #0]
   d52e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d52ea:	9301      	str	r3, [sp, #4]
   d52ec:	bd08      	pop	{r3, pc}
   d52ee:	0000      	.short	0x0000
   d52f0:	00030220 	.word	0x00030220

000d52f4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d52f4:	b508      	push	{r3, lr}
   d52f6:	4b02      	ldr	r3, [pc, #8]	; (d5300 <spark_process+0xc>)
   d52f8:	681b      	ldr	r3, [r3, #0]
   d52fa:	689b      	ldr	r3, [r3, #8]
   d52fc:	9301      	str	r3, [sp, #4]
   d52fe:	bd08      	pop	{r3, pc}
   d5300:	00030244 	.word	0x00030244

000d5304 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5304:	b508      	push	{r3, lr}
   d5306:	4b02      	ldr	r3, [pc, #8]	; (d5310 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5308:	681b      	ldr	r3, [r3, #0]
   d530a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d530c:	9301      	str	r3, [sp, #4]
   d530e:	bd08      	pop	{r3, pc}
   d5310:	00030244 	.word	0x00030244

000d5314 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5314:	b508      	push	{r3, lr}
   d5316:	4b02      	ldr	r3, [pc, #8]	; (d5320 <network_connect+0xc>)
   d5318:	681b      	ldr	r3, [r3, #0]
   d531a:	685b      	ldr	r3, [r3, #4]
   d531c:	9301      	str	r3, [sp, #4]
   d531e:	bd08      	pop	{r3, pc}
   d5320:	00030240 	.word	0x00030240

000d5324 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5324:	b508      	push	{r3, lr}
   d5326:	4b02      	ldr	r3, [pc, #8]	; (d5330 <network_connecting+0xc>)
   d5328:	681b      	ldr	r3, [r3, #0]
   d532a:	689b      	ldr	r3, [r3, #8]
   d532c:	9301      	str	r3, [sp, #4]
   d532e:	bd08      	pop	{r3, pc}
   d5330:	00030240 	.word	0x00030240

000d5334 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5334:	b508      	push	{r3, lr}
   d5336:	4b02      	ldr	r3, [pc, #8]	; (d5340 <network_disconnect+0xc>)
   d5338:	681b      	ldr	r3, [r3, #0]
   d533a:	68db      	ldr	r3, [r3, #12]
   d533c:	9301      	str	r3, [sp, #4]
   d533e:	bd08      	pop	{r3, pc}
   d5340:	00030240 	.word	0x00030240

000d5344 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5344:	b508      	push	{r3, lr}
   d5346:	4b02      	ldr	r3, [pc, #8]	; (d5350 <network_ready+0xc>)
   d5348:	681b      	ldr	r3, [r3, #0]
   d534a:	691b      	ldr	r3, [r3, #16]
   d534c:	9301      	str	r3, [sp, #4]
   d534e:	bd08      	pop	{r3, pc}
   d5350:	00030240 	.word	0x00030240

000d5354 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5354:	b508      	push	{r3, lr}
   d5356:	4b02      	ldr	r3, [pc, #8]	; (d5360 <network_on+0xc>)
   d5358:	681b      	ldr	r3, [r3, #0]
   d535a:	695b      	ldr	r3, [r3, #20]
   d535c:	9301      	str	r3, [sp, #4]
   d535e:	bd08      	pop	{r3, pc}
   d5360:	00030240 	.word	0x00030240

000d5364 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5364:	b508      	push	{r3, lr}
   d5366:	4b02      	ldr	r3, [pc, #8]	; (d5370 <network_off+0xc>)
   d5368:	681b      	ldr	r3, [r3, #0]
   d536a:	699b      	ldr	r3, [r3, #24]
   d536c:	9301      	str	r3, [sp, #4]
   d536e:	bd08      	pop	{r3, pc}
   d5370:	00030240 	.word	0x00030240

000d5374 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5374:	b508      	push	{r3, lr}
   d5376:	4b02      	ldr	r3, [pc, #8]	; (d5380 <network_listen+0xc>)
   d5378:	681b      	ldr	r3, [r3, #0]
   d537a:	69db      	ldr	r3, [r3, #28]
   d537c:	9301      	str	r3, [sp, #4]
   d537e:	bd08      	pop	{r3, pc}
   d5380:	00030240 	.word	0x00030240

000d5384 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5384:	b508      	push	{r3, lr}
   d5386:	4b02      	ldr	r3, [pc, #8]	; (d5390 <network_listening+0xc>)
   d5388:	681b      	ldr	r3, [r3, #0]
   d538a:	6a1b      	ldr	r3, [r3, #32]
   d538c:	9301      	str	r3, [sp, #4]
   d538e:	bd08      	pop	{r3, pc}
   d5390:	00030240 	.word	0x00030240

000d5394 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5394:	b508      	push	{r3, lr}
   d5396:	4b02      	ldr	r3, [pc, #8]	; (d53a0 <network_set_listen_timeout+0xc>)
   d5398:	681b      	ldr	r3, [r3, #0]
   d539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d539c:	9301      	str	r3, [sp, #4]
   d539e:	bd08      	pop	{r3, pc}
   d53a0:	00030240 	.word	0x00030240

000d53a4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d53a4:	b508      	push	{r3, lr}
   d53a6:	4b02      	ldr	r3, [pc, #8]	; (d53b0 <network_get_listen_timeout+0xc>)
   d53a8:	681b      	ldr	r3, [r3, #0]
   d53aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d53ac:	9301      	str	r3, [sp, #4]
   d53ae:	bd08      	pop	{r3, pc}
   d53b0:	00030240 	.word	0x00030240

000d53b4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d53b4:	b508      	push	{r3, lr}
   d53b6:	4b02      	ldr	r3, [pc, #8]	; (d53c0 <network_is_on+0xc>)
   d53b8:	681b      	ldr	r3, [r3, #0]
   d53ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d53bc:	9301      	str	r3, [sp, #4]
   d53be:	bd08      	pop	{r3, pc}
   d53c0:	00030240 	.word	0x00030240

000d53c4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d53c4:	b508      	push	{r3, lr}
   d53c6:	4b02      	ldr	r3, [pc, #8]	; (d53d0 <network_is_off+0xc>)
   d53c8:	681b      	ldr	r3, [r3, #0]
   d53ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d53cc:	9301      	str	r3, [sp, #4]
   d53ce:	bd08      	pop	{r3, pc}
   d53d0:	00030240 	.word	0x00030240

000d53d4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d53d4:	b508      	push	{r3, lr}
   d53d6:	4b02      	ldr	r3, [pc, #8]	; (d53e0 <malloc+0xc>)
   d53d8:	681b      	ldr	r3, [r3, #0]
   d53da:	681b      	ldr	r3, [r3, #0]
   d53dc:	9301      	str	r3, [sp, #4]
   d53de:	bd08      	pop	{r3, pc}
   d53e0:	0003021c 	.word	0x0003021c

000d53e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d53e4:	b508      	push	{r3, lr}
   d53e6:	4b02      	ldr	r3, [pc, #8]	; (d53f0 <free+0xc>)
   d53e8:	681b      	ldr	r3, [r3, #0]
   d53ea:	685b      	ldr	r3, [r3, #4]
   d53ec:	9301      	str	r3, [sp, #4]
   d53ee:	bd08      	pop	{r3, pc}
   d53f0:	0003021c 	.word	0x0003021c

000d53f4 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d53f4:	b508      	push	{r3, lr}
   d53f6:	4b02      	ldr	r3, [pc, #8]	; (d5400 <snprintf+0xc>)
   d53f8:	681b      	ldr	r3, [r3, #0]
   d53fa:	69db      	ldr	r3, [r3, #28]
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	bd08      	pop	{r3, pc}
   d5400:	0003021c 	.word	0x0003021c

000d5404 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5404:	b508      	push	{r3, lr}
   d5406:	4b02      	ldr	r3, [pc, #8]	; (d5410 <vsnprintf+0xc>)
   d5408:	681b      	ldr	r3, [r3, #0]
   d540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d540c:	9301      	str	r3, [sp, #4]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	0003021c 	.word	0x0003021c

000d5414 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5414:	b508      	push	{r3, lr}
   d5416:	4b02      	ldr	r3, [pc, #8]	; (d5420 <__errno+0xc>)
   d5418:	681b      	ldr	r3, [r3, #0]
   d541a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d541c:	9301      	str	r3, [sp, #4]
   d541e:	bd08      	pop	{r3, pc}
   d5420:	0003021c 	.word	0x0003021c

000d5424 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5424:	b508      	push	{r3, lr}
   d5426:	4b02      	ldr	r3, [pc, #8]	; (d5430 <newlib_impure_ptr_callback+0xc>)
   d5428:	681b      	ldr	r3, [r3, #0]
   d542a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d542c:	9301      	str	r3, [sp, #4]
   d542e:	bd08      	pop	{r3, pc}
   d5430:	0003021c 	.word	0x0003021c

000d5434 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5434:	2100      	movs	r1, #0
   d5436:	f7ff bf39 	b.w	d52ac <system_delay_ms>

000d543a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d543a:	b510      	push	{r4, lr}
   d543c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d543e:	6800      	ldr	r0, [r0, #0]
   d5440:	b108      	cbz	r0, d5446 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5442:	f7ff fd6b 	bl	d4f1c <os_mutex_recursive_destroy>
    }
   d5446:	4620      	mov	r0, r4
   d5448:	bd10      	pop	{r4, pc}

000d544a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d544a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d544c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d544e:	4604      	mov	r4, r0
      if (_M_manager)
   d5450:	b113      	cbz	r3, d5458 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5452:	2203      	movs	r2, #3
   d5454:	4601      	mov	r1, r0
   d5456:	4798      	blx	r3
    }
   d5458:	4620      	mov	r0, r4
   d545a:	bd10      	pop	{r4, pc}

000d545c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d545c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d545e:	4c06      	ldr	r4, [pc, #24]	; (d5478 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5460:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5462:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5464:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5466:	f7ff fd51 	bl	d4f0c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d546a:	4620      	mov	r0, r4
   d546c:	4a03      	ldr	r2, [pc, #12]	; (d547c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d546e:	4904      	ldr	r1, [pc, #16]	; (d5480 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5474:	f001 b94c 	b.w	d6710 <__aeabi_atexit>
   d5478:	2003e650 	.word	0x2003e650
   d547c:	2003e5bc 	.word	0x2003e5bc
   d5480:	000d543b 	.word	0x000d543b

000d5484 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5484:	2200      	movs	r2, #0
   d5486:	6840      	ldr	r0, [r0, #4]
   d5488:	4611      	mov	r1, r2
   d548a:	f7ff bf7b 	b.w	d5384 <network_listening>

000d548e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d548e:	2200      	movs	r2, #0
   d5490:	6840      	ldr	r0, [r0, #4]
   d5492:	4611      	mov	r1, r2
   d5494:	f7ff bf86 	b.w	d53a4 <network_get_listen_timeout>

000d5498 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5498:	6840      	ldr	r0, [r0, #4]
   d549a:	2200      	movs	r2, #0
   d549c:	f7ff bf7a 	b.w	d5394 <network_set_listen_timeout>

000d54a0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d54a0:	6840      	ldr	r0, [r0, #4]
   d54a2:	2200      	movs	r2, #0
   d54a4:	f081 0101 	eor.w	r1, r1, #1
   d54a8:	f7ff bf64 	b.w	d5374 <network_listen>

000d54ac <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d54ac:	2300      	movs	r3, #0
   d54ae:	6840      	ldr	r0, [r0, #4]
   d54b0:	461a      	mov	r2, r3
   d54b2:	4619      	mov	r1, r3
   d54b4:	f7ff bf56 	b.w	d5364 <network_off>

000d54b8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d54b8:	2300      	movs	r3, #0
   d54ba:	6840      	ldr	r0, [r0, #4]
   d54bc:	461a      	mov	r2, r3
   d54be:	4619      	mov	r1, r3
   d54c0:	f7ff bf48 	b.w	d5354 <network_on>

000d54c4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d54c4:	2200      	movs	r2, #0
   d54c6:	6840      	ldr	r0, [r0, #4]
   d54c8:	4611      	mov	r1, r2
   d54ca:	f7ff bf3b 	b.w	d5344 <network_ready>

000d54ce <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d54ce:	2200      	movs	r2, #0
   d54d0:	6840      	ldr	r0, [r0, #4]
   d54d2:	4611      	mov	r1, r2
   d54d4:	f7ff bf26 	b.w	d5324 <network_connecting>

000d54d8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d54d8:	6840      	ldr	r0, [r0, #4]
   d54da:	2200      	movs	r2, #0
   d54dc:	2102      	movs	r1, #2
   d54de:	f7ff bf29 	b.w	d5334 <network_disconnect>

000d54e2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d54e2:	2300      	movs	r3, #0
   d54e4:	6840      	ldr	r0, [r0, #4]
   d54e6:	461a      	mov	r2, r3
   d54e8:	f7ff bf14 	b.w	d5314 <network_connect>

000d54ec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d54ec:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d54ee:	2203      	movs	r2, #3
   d54f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d54f2:	4a02      	ldr	r2, [pc, #8]	; (d54fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d54f4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d54f6:	4770      	bx	lr
   d54f8:	2003e654 	.word	0x2003e654
   d54fc:	000d7098 	.word	0x000d7098

000d5500 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5500:	4770      	bx	lr

000d5502 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5504:	4606      	mov	r6, r0
   d5506:	4615      	mov	r5, r2
   d5508:	460c      	mov	r4, r1
   d550a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d550c:	42bc      	cmp	r4, r7
   d550e:	d006      	beq.n	d551e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5510:	6833      	ldr	r3, [r6, #0]
   d5512:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5516:	689b      	ldr	r3, [r3, #8]
   d5518:	4630      	mov	r0, r6
   d551a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d551c:	e7f6      	b.n	d550c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d551e:	4628      	mov	r0, r5
   d5520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5522 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5522:	7c00      	ldrb	r0, [r0, #16]
   d5524:	2200      	movs	r2, #0
   d5526:	f7ff bd59 	b.w	d4fdc <hal_i2c_write>

000d552a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d552a:	7c00      	ldrb	r0, [r0, #16]
   d552c:	2100      	movs	r1, #0
   d552e:	f7ff bd5d 	b.w	d4fec <hal_i2c_available>

000d5532 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5532:	7c00      	ldrb	r0, [r0, #16]
   d5534:	2100      	movs	r1, #0
   d5536:	f7ff bd61 	b.w	d4ffc <hal_i2c_read>

000d553a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d553a:	7c00      	ldrb	r0, [r0, #16]
   d553c:	2100      	movs	r1, #0
   d553e:	f7ff bd65 	b.w	d500c <hal_i2c_peek>

000d5542 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5542:	7c00      	ldrb	r0, [r0, #16]
   d5544:	2100      	movs	r1, #0
   d5546:	f7ff bd69 	b.w	d501c <hal_i2c_flush>

000d554a <_ZN7TwoWireD0Ev>:
   d554a:	b510      	push	{r4, lr}
   d554c:	2114      	movs	r1, #20
   d554e:	4604      	mov	r4, r0
   d5550:	f001 f8e3 	bl	d671a <_ZdlPvj>
   d5554:	4620      	mov	r0, r4
   d5556:	bd10      	pop	{r4, pc}

000d5558 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5558:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d555a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d555e:	4604      	mov	r4, r0
   d5560:	4608      	mov	r0, r1
   d5562:	2100      	movs	r1, #0
   d5564:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5568:	4b03      	ldr	r3, [pc, #12]	; (d5578 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d556a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d556c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d556e:	4611      	mov	r1, r2
   d5570:	f7ff fd64 	bl	d503c <hal_i2c_init>
}
   d5574:	4620      	mov	r0, r4
   d5576:	bd10      	pop	{r4, pc}
   d5578:	000d70d4 	.word	0x000d70d4

000d557c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d557c:	4770      	bx	lr

000d557e <_ZN9IPAddressD0Ev>:
   d557e:	b510      	push	{r4, lr}
   d5580:	2118      	movs	r1, #24
   d5582:	4604      	mov	r4, r0
   d5584:	f001 f8c9 	bl	d671a <_ZdlPvj>
   d5588:	4620      	mov	r0, r4
   d558a:	bd10      	pop	{r4, pc}

000d558c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d558c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d558e:	7d03      	ldrb	r3, [r0, #20]
   d5590:	2b06      	cmp	r3, #6
{
   d5592:	b08d      	sub	sp, #52	; 0x34
   d5594:	460e      	mov	r6, r1
   d5596:	f100 0704 	add.w	r7, r0, #4
   d559a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d559e:	d012      	beq.n	d55c6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d55a0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d55a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d55a8:	220a      	movs	r2, #10
   d55aa:	4630      	mov	r0, r6
   d55ac:	f000 f981 	bl	d58b2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d55b0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d55b2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d55b4:	d019      	beq.n	d55ea <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d55b6:	2c00      	cmp	r4, #0
   d55b8:	d0f4      	beq.n	d55a4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d55ba:	212e      	movs	r1, #46	; 0x2e
   d55bc:	4630      	mov	r0, r6
   d55be:	f000 f95f 	bl	d5880 <_ZN5Print5printEc>
   d55c2:	4404      	add	r4, r0
   d55c4:	e7ee      	b.n	d55a4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55c6:	232f      	movs	r3, #47	; 0x2f
   d55c8:	466a      	mov	r2, sp
   d55ca:	4639      	mov	r1, r7
   d55cc:	200a      	movs	r0, #10
		buf[0] = 0;
   d55ce:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55d2:	f7ff fd43 	bl	d505c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d55d6:	4668      	mov	r0, sp
   d55d8:	f001 fa10 	bl	d69fc <strlen>
   d55dc:	6833      	ldr	r3, [r6, #0]
   d55de:	4602      	mov	r2, r0
   d55e0:	68db      	ldr	r3, [r3, #12]
   d55e2:	4669      	mov	r1, sp
   d55e4:	4630      	mov	r0, r6
   d55e6:	4798      	blx	r3
   d55e8:	4604      	mov	r4, r0
    }
    return n;
}
   d55ea:	4620      	mov	r0, r4
   d55ec:	b00d      	add	sp, #52	; 0x34
   d55ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d55f0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d55f0:	b510      	push	{r4, lr}
   d55f2:	4b05      	ldr	r3, [pc, #20]	; (d5608 <_ZN9IPAddressC1Ev+0x18>)
   d55f4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d55f6:	2211      	movs	r2, #17
   d55f8:	f840 3b04 	str.w	r3, [r0], #4
   d55fc:	2100      	movs	r1, #0
   d55fe:	f001 f9c7 	bl	d6990 <memset>
}
   d5602:	4620      	mov	r0, r4
   d5604:	bd10      	pop	{r4, pc}
   d5606:	bf00      	nop
   d5608:	000d70fc 	.word	0x000d70fc

000d560c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d560c:	4603      	mov	r3, r0
   d560e:	4a07      	ldr	r2, [pc, #28]	; (d562c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5610:	b510      	push	{r4, lr}
   d5612:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5616:	f101 0210 	add.w	r2, r1, #16
   d561a:	f851 4b04 	ldr.w	r4, [r1], #4
   d561e:	f843 4b04 	str.w	r4, [r3], #4
   d5622:	4291      	cmp	r1, r2
   d5624:	d1f9      	bne.n	d561a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5626:	780a      	ldrb	r2, [r1, #0]
   d5628:	701a      	strb	r2, [r3, #0]
}
   d562a:	bd10      	pop	{r4, pc}
   d562c:	000d70fc 	.word	0x000d70fc

000d5630 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d5630:	7d03      	ldrb	r3, [r0, #20]
   d5632:	2b04      	cmp	r3, #4
   d5634:	d104      	bne.n	d5640 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d5636:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5638:	3800      	subs	r0, #0
   d563a:	bf18      	it	ne
   d563c:	2001      	movne	r0, #1
   d563e:	4770      	bx	lr
    } else if (version() == 6) {
   d5640:	2b06      	cmp	r3, #6
   d5642:	d107      	bne.n	d5654 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5644:	6843      	ldr	r3, [r0, #4]
   d5646:	b93b      	cbnz	r3, d5658 <_ZNK9IPAddresscvbEv+0x28>
   d5648:	6883      	ldr	r3, [r0, #8]
   d564a:	b92b      	cbnz	r3, d5658 <_ZNK9IPAddresscvbEv+0x28>
   d564c:	68c3      	ldr	r3, [r0, #12]
   d564e:	b91b      	cbnz	r3, d5658 <_ZNK9IPAddresscvbEv+0x28>
   d5650:	6900      	ldr	r0, [r0, #16]
   d5652:	e7f1      	b.n	d5638 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d5654:	2000      	movs	r0, #0
   d5656:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5658:	2001      	movs	r0, #1
}
   d565a:	4770      	bx	lr

000d565c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d565c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d565e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5662:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5666:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d566a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d566e:	2304      	movs	r3, #4
   d5670:	6041      	str	r1, [r0, #4]
   d5672:	7503      	strb	r3, [r0, #20]
}
   d5674:	bd10      	pop	{r4, pc}
	...

000d5678 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d5678:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d567a:	4d04      	ldr	r5, [pc, #16]	; (d568c <_ZN9IPAddressC1Ehhhh+0x14>)
   d567c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d567e:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d5682:	9500      	str	r5, [sp, #0]
   d5684:	f7ff ffea 	bl	d565c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5688:	b003      	add	sp, #12
   d568a:	bd30      	pop	{r4, r5, pc}
   d568c:	000d70fc 	.word	0x000d70fc

000d5690 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5690:	b513      	push	{r0, r1, r4, lr}
   d5692:	4b05      	ldr	r3, [pc, #20]	; (d56a8 <_ZN9IPAddressC1EPKh+0x18>)
   d5694:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5696:	78cb      	ldrb	r3, [r1, #3]
   d5698:	9300      	str	r3, [sp, #0]
   d569a:	788b      	ldrb	r3, [r1, #2]
   d569c:	784a      	ldrb	r2, [r1, #1]
   d569e:	7809      	ldrb	r1, [r1, #0]
   d56a0:	f7ff ffdc 	bl	d565c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d56a4:	b002      	add	sp, #8
   d56a6:	bd10      	pop	{r4, pc}
   d56a8:	000d70fc 	.word	0x000d70fc

000d56ac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d56ac:	4b01      	ldr	r3, [pc, #4]	; (d56b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d56ae:	4a02      	ldr	r2, [pc, #8]	; (d56b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d56b0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d56b2:	4770      	bx	lr
   d56b4:	2003e65c 	.word	0x2003e65c
   d56b8:	000d7108 	.word	0x000d7108

000d56bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d56bc:	2300      	movs	r3, #0
   d56be:	6840      	ldr	r0, [r0, #4]
   d56c0:	461a      	mov	r2, r3
   d56c2:	f7ff be27 	b.w	d5314 <network_connect>

000d56c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d56c6:	6840      	ldr	r0, [r0, #4]
   d56c8:	2200      	movs	r2, #0
   d56ca:	2102      	movs	r1, #2
   d56cc:	f7ff be32 	b.w	d5334 <network_disconnect>

000d56d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d56d0:	2200      	movs	r2, #0
   d56d2:	6840      	ldr	r0, [r0, #4]
   d56d4:	4611      	mov	r1, r2
   d56d6:	f7ff be25 	b.w	d5324 <network_connecting>

000d56da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d56da:	2200      	movs	r2, #0
   d56dc:	6840      	ldr	r0, [r0, #4]
   d56de:	4611      	mov	r1, r2
   d56e0:	f7ff be30 	b.w	d5344 <network_ready>

000d56e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d56e4:	2300      	movs	r3, #0
   d56e6:	6840      	ldr	r0, [r0, #4]
   d56e8:	461a      	mov	r2, r3
   d56ea:	4619      	mov	r1, r3
   d56ec:	f7ff be32 	b.w	d5354 <network_on>

000d56f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d56f0:	2300      	movs	r3, #0
   d56f2:	6840      	ldr	r0, [r0, #4]
   d56f4:	461a      	mov	r2, r3
   d56f6:	4619      	mov	r1, r3
   d56f8:	f7ff be34 	b.w	d5364 <network_off>

000d56fc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d56fc:	6840      	ldr	r0, [r0, #4]
   d56fe:	2100      	movs	r1, #0
   d5700:	f7ff be58 	b.w	d53b4 <network_is_on>

000d5704 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5704:	6840      	ldr	r0, [r0, #4]
   d5706:	2100      	movs	r1, #0
   d5708:	f7ff be5c 	b.w	d53c4 <network_is_off>

000d570c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d570c:	6840      	ldr	r0, [r0, #4]
   d570e:	2200      	movs	r2, #0
   d5710:	f081 0101 	eor.w	r1, r1, #1
   d5714:	f7ff be2e 	b.w	d5374 <network_listen>

000d5718 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5718:	6840      	ldr	r0, [r0, #4]
   d571a:	2200      	movs	r2, #0
   d571c:	f7ff be3a 	b.w	d5394 <network_set_listen_timeout>

000d5720 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5720:	2200      	movs	r2, #0
   d5722:	6840      	ldr	r0, [r0, #4]
   d5724:	4611      	mov	r1, r2
   d5726:	f7ff be3d 	b.w	d53a4 <network_get_listen_timeout>

000d572a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d572a:	2200      	movs	r2, #0
   d572c:	6840      	ldr	r0, [r0, #4]
   d572e:	4611      	mov	r1, r2
   d5730:	f7ff be28 	b.w	d5384 <network_listening>

000d5734 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5738:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d573a:	b095      	sub	sp, #84	; 0x54
   d573c:	4616      	mov	r6, r2
   d573e:	460d      	mov	r5, r1
   d5740:	4607      	mov	r7, r0
    IPAddress addr;
   d5742:	f7ff ff55 	bl	d55f0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5746:	4621      	mov	r1, r4
   d5748:	2218      	movs	r2, #24
   d574a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d574c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d574e:	f001 f91f 	bl	d6990 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5752:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5754:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5758:	4621      	mov	r1, r4
   d575a:	466b      	mov	r3, sp
   d575c:	aa0c      	add	r2, sp, #48	; 0x30
   d575e:	4630      	mov	r0, r6
   d5760:	f7ff fc9c 	bl	d509c <netdb_getaddrinfo>
    if (!r) {
   d5764:	4604      	mov	r4, r0
   d5766:	2800      	cmp	r0, #0
   d5768:	d14c      	bne.n	d5804 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d576a:	4602      	mov	r2, r0
   d576c:	2101      	movs	r1, #1
   d576e:	6868      	ldr	r0, [r5, #4]
   d5770:	f7ff fde8 	bl	d5344 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5774:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5776:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5778:	4622      	mov	r2, r4
   d577a:	6868      	ldr	r0, [r5, #4]
   d577c:	f7ff fde2 	bl	d5344 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5780:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5782:	4681      	mov	r9, r0
        bool ok = false;
   d5784:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5786:	2e00      	cmp	r6, #0
   d5788:	d03c      	beq.n	d5804 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d578a:	2900      	cmp	r1, #0
   d578c:	d13a      	bne.n	d5804 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d578e:	6873      	ldr	r3, [r6, #4]
   d5790:	2b02      	cmp	r3, #2
   d5792:	d003      	beq.n	d579c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5794:	2b0a      	cmp	r3, #10
   d5796:	d011      	beq.n	d57bc <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5798:	69f6      	ldr	r6, [r6, #28]
   d579a:	e7f4      	b.n	d5786 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d579c:	f1b8 0f00 	cmp.w	r8, #0
   d57a0:	d00a      	beq.n	d57b8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d57a2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d57a4:	a806      	add	r0, sp, #24
   d57a6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d57a8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d57aa:	f7ff ff71 	bl	d5690 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d57ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d57b0:	1d3c      	adds	r4, r7, #4
   d57b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d57b4:	682b      	ldr	r3, [r5, #0]
   d57b6:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d57b8:	4641      	mov	r1, r8
   d57ba:	e7ed      	b.n	d5798 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d57bc:	f1b9 0f00 	cmp.w	r9, #0
   d57c0:	d101      	bne.n	d57c6 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d57c2:	4649      	mov	r1, r9
   d57c4:	e7e8      	b.n	d5798 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d57c6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d57c8:	2210      	movs	r2, #16
   d57ca:	a801      	add	r0, sp, #4
   d57cc:	f001 f8e0 	bl	d6990 <memset>
                    a.v = 6;
   d57d0:	2306      	movs	r3, #6
   d57d2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d57d6:	ad01      	add	r5, sp, #4
   d57d8:	f104 0308 	add.w	r3, r4, #8
   d57dc:	3418      	adds	r4, #24
   d57de:	6818      	ldr	r0, [r3, #0]
   d57e0:	6859      	ldr	r1, [r3, #4]
   d57e2:	462a      	mov	r2, r5
   d57e4:	c203      	stmia	r2!, {r0, r1}
   d57e6:	3308      	adds	r3, #8
   d57e8:	42a3      	cmp	r3, r4
   d57ea:	4615      	mov	r5, r2
   d57ec:	d1f7      	bne.n	d57de <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d57ee:	a901      	add	r1, sp, #4
   d57f0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d57f2:	ad07      	add	r5, sp, #28
   d57f4:	f7ff ff0a 	bl	d560c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d57f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d57fa:	1d3c      	adds	r4, r7, #4
   d57fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d57fe:	682b      	ldr	r3, [r5, #0]
   d5800:	7023      	strb	r3, [r4, #0]
   d5802:	e7de      	b.n	d57c2 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5804:	9800      	ldr	r0, [sp, #0]
   d5806:	f7ff fc41 	bl	d508c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d580a:	4638      	mov	r0, r7
   d580c:	b015      	add	sp, #84	; 0x54
   d580e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5814 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5814:	4b02      	ldr	r3, [pc, #8]	; (d5820 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5816:	4a03      	ldr	r2, [pc, #12]	; (d5824 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5818:	601a      	str	r2, [r3, #0]
   d581a:	2200      	movs	r2, #0
   d581c:	605a      	str	r2, [r3, #4]

} // spark
   d581e:	4770      	bx	lr
   d5820:	2003e660 	.word	0x2003e660
   d5824:	000d7114 	.word	0x000d7114

000d5828 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d582a:	4606      	mov	r6, r0
   d582c:	460d      	mov	r5, r1
  size_t n = 0;
   d582e:	188f      	adds	r7, r1, r2
   d5830:	2400      	movs	r4, #0
  while (size--) {
   d5832:	42bd      	cmp	r5, r7
   d5834:	d00c      	beq.n	d5850 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5836:	6833      	ldr	r3, [r6, #0]
   d5838:	f815 1b01 	ldrb.w	r1, [r5], #1
   d583c:	689b      	ldr	r3, [r3, #8]
   d583e:	4630      	mov	r0, r6
   d5840:	4798      	blx	r3
     if (chunk>=0)
   d5842:	1e03      	subs	r3, r0, #0
   d5844:	db01      	blt.n	d584a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5846:	441c      	add	r4, r3
  while (size--) {
   d5848:	e7f3      	b.n	d5832 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d584a:	2c00      	cmp	r4, #0
   d584c:	bf08      	it	eq
   d584e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5850:	4620      	mov	r0, r4
   d5852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5854 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5854:	b513      	push	{r0, r1, r4, lr}
   d5856:	4604      	mov	r4, r0
    }
   d5858:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d585a:	b159      	cbz	r1, d5874 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d585c:	9101      	str	r1, [sp, #4]
   d585e:	f001 f8cd 	bl	d69fc <strlen>
   d5862:	6823      	ldr	r3, [r4, #0]
   d5864:	9901      	ldr	r1, [sp, #4]
   d5866:	68db      	ldr	r3, [r3, #12]
   d5868:	4602      	mov	r2, r0
   d586a:	4620      	mov	r0, r4
    }
   d586c:	b002      	add	sp, #8
   d586e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5872:	4718      	bx	r3
    }
   d5874:	b002      	add	sp, #8
   d5876:	bd10      	pop	{r4, pc}

000d5878 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5878:	b508      	push	{r3, lr}
  return write(str);
   d587a:	f7ff ffeb 	bl	d5854 <_ZN5Print5writeEPKc>
}
   d587e:	bd08      	pop	{r3, pc}

000d5880 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5880:	6803      	ldr	r3, [r0, #0]
   d5882:	689b      	ldr	r3, [r3, #8]
   d5884:	4718      	bx	r3

000d5886 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5886:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5888:	210d      	movs	r1, #13
{
   d588a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d588c:	f7ff fff8 	bl	d5880 <_ZN5Print5printEc>
  n += print('\n');
   d5890:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5892:	4604      	mov	r4, r0
  n += print('\n');
   d5894:	4628      	mov	r0, r5
   d5896:	f7ff fff3 	bl	d5880 <_ZN5Print5printEc>
  return n;
}
   d589a:	4420      	add	r0, r4
   d589c:	bd38      	pop	{r3, r4, r5, pc}

000d589e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d589e:	b538      	push	{r3, r4, r5, lr}
   d58a0:	4605      	mov	r5, r0
  return write(str);
   d58a2:	f7ff ffd7 	bl	d5854 <_ZN5Print5writeEPKc>
   d58a6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d58a8:	4628      	mov	r0, r5
   d58aa:	f7ff ffec 	bl	d5886 <_ZN5Print7printlnEv>
  return n;
}
   d58ae:	4420      	add	r0, r4
   d58b0:	bd38      	pop	{r3, r4, r5, pc}

000d58b2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d58b2:	b530      	push	{r4, r5, lr}
   d58b4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d58b6:	2300      	movs	r3, #0
   d58b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d58bc:	2a01      	cmp	r2, #1
   d58be:	bf98      	it	ls
   d58c0:	220a      	movls	r2, #10
   d58c2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d58c4:	460d      	mov	r5, r1
   d58c6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d58ca:	fb01 5312 	mls	r3, r1, r2, r5
   d58ce:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d58d2:	2b09      	cmp	r3, #9
   d58d4:	bf94      	ite	ls
   d58d6:	3330      	addls	r3, #48	; 0x30
   d58d8:	3337      	addhi	r3, #55	; 0x37
   d58da:	b2db      	uxtb	r3, r3
  } while(n);
   d58dc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d58de:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d58e2:	d9ef      	bls.n	d58c4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d58e4:	4621      	mov	r1, r4
   d58e6:	f7ff ffb5 	bl	d5854 <_ZN5Print5writeEPKc>
}
   d58ea:	b00b      	add	sp, #44	; 0x2c
   d58ec:	bd30      	pop	{r4, r5, pc}

000d58ee <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d58ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d58f2:	b086      	sub	sp, #24
   d58f4:	af00      	add	r7, sp, #0
   d58f6:	4605      	mov	r5, r0
   d58f8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d58fa:	1d38      	adds	r0, r7, #4
   d58fc:	2114      	movs	r1, #20
{
   d58fe:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5900:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5902:	f7ff fd7f 	bl	d5404 <vsnprintf>

    if (n<bufsize)
   d5906:	2813      	cmp	r0, #19
   d5908:	d80e      	bhi.n	d5928 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d590a:	1d39      	adds	r1, r7, #4
   d590c:	4628      	mov	r0, r5
   d590e:	f7ff ffa1 	bl	d5854 <_ZN5Print5writeEPKc>
   d5912:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5914:	b11e      	cbz	r6, d591e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5916:	4628      	mov	r0, r5
   d5918:	f7ff ffb5 	bl	d5886 <_ZN5Print7printlnEv>
   d591c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d591e:	4620      	mov	r0, r4
   d5920:	3718      	adds	r7, #24
   d5922:	46bd      	mov	sp, r7
   d5924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5928:	f100 0308 	add.w	r3, r0, #8
   d592c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5930:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5932:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5936:	4622      	mov	r2, r4
   d5938:	1c41      	adds	r1, r0, #1
   d593a:	683b      	ldr	r3, [r7, #0]
   d593c:	4668      	mov	r0, sp
   d593e:	f7ff fd61 	bl	d5404 <vsnprintf>
  return write(str);
   d5942:	4669      	mov	r1, sp
   d5944:	4628      	mov	r0, r5
   d5946:	f7ff ff85 	bl	d5854 <_ZN5Print5writeEPKc>
   d594a:	4604      	mov	r4, r0
   d594c:	46c5      	mov	sp, r8
   d594e:	e7e1      	b.n	d5914 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5950 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5950:	b510      	push	{r4, lr}
   d5952:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5954:	f7ff fd79 	bl	d544a <_ZNSt14_Function_baseD1Ev>
   d5958:	4620      	mov	r0, r4
   d595a:	bd10      	pop	{r4, pc}

000d595c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d595c:	4803      	ldr	r0, [pc, #12]	; (d596c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d595e:	4a04      	ldr	r2, [pc, #16]	; (d5970 <_GLOBAL__sub_I_RGB+0x14>)
   d5960:	4904      	ldr	r1, [pc, #16]	; (d5974 <_GLOBAL__sub_I_RGB+0x18>)
   d5962:	2300      	movs	r3, #0
   d5964:	6083      	str	r3, [r0, #8]
   d5966:	f000 bed3 	b.w	d6710 <__aeabi_atexit>
   d596a:	bf00      	nop
   d596c:	2003e668 	.word	0x2003e668
   d5970:	2003e5bc 	.word	0x2003e5bc
   d5974:	000d5951 	.word	0x000d5951

000d5978 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5978:	2100      	movs	r1, #0
   d597a:	f7ff bbf7 	b.w	d516c <hal_spi_acquire>

000d597e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d597e:	2100      	movs	r1, #0
   d5980:	f7ff bbfc 	b.w	d517c <hal_spi_release>

000d5984 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5984:	b510      	push	{r4, lr}
   d5986:	4604      	mov	r4, r0
   d5988:	4608      	mov	r0, r1
{
    _spi = spi;
   d598a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d598c:	f7ff fbce 	bl	d512c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5990:	2300      	movs	r3, #0
   d5992:	6063      	str	r3, [r4, #4]
}
   d5994:	4620      	mov	r0, r4
   d5996:	bd10      	pop	{r4, pc}

000d5998 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d5998:	b513      	push	{r0, r1, r4, lr}
   d599a:	4604      	mov	r4, r0
    if (!lock())
   d599c:	7800      	ldrb	r0, [r0, #0]
{
   d599e:	9101      	str	r1, [sp, #4]
    if (!lock())
   d59a0:	f7ff ffea 	bl	d5978 <_ZN8SPIClass4lockEv.isra.0>
   d59a4:	9901      	ldr	r1, [sp, #4]
   d59a6:	b940      	cbnz	r0, d59ba <_ZN8SPIClass5beginEt+0x22>
    {
        hal_spi_begin(_spi, ss_pin);
   d59a8:	7820      	ldrb	r0, [r4, #0]
   d59aa:	f7ff fbaf 	bl	d510c <hal_spi_begin>
        unlock();
   d59ae:	7820      	ldrb	r0, [r4, #0]
    }
}
   d59b0:	b002      	add	sp, #8
   d59b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d59b6:	f7ff bfe2 	b.w	d597e <_ZN8SPIClass6unlockEv.isra.0>
}
   d59ba:	b002      	add	sp, #8
   d59bc:	bd10      	pop	{r4, pc}

000d59be <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d59be:	7800      	ldrb	r0, [r0, #0]
   d59c0:	f7ff bfdd 	b.w	d597e <_ZN8SPIClass6unlockEv.isra.0>

000d59c4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d59c4:	0840      	lsrs	r0, r0, #1
{
   d59c6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d59c8:	6018      	str	r0, [r3, #0]
   d59ca:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d59cc:	6818      	ldr	r0, [r3, #0]
   d59ce:	4288      	cmp	r0, r1
   d59d0:	b2e5      	uxtb	r5, r4
   d59d2:	d906      	bls.n	d59e2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d59d4:	3401      	adds	r4, #1
   d59d6:	2c08      	cmp	r4, #8
   d59d8:	d002      	beq.n	d59e0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d59da:	0840      	lsrs	r0, r0, #1
   d59dc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d59de:	e7f5      	b.n	d59cc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d59e0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d59e2:	4b02      	ldr	r3, [pc, #8]	; (d59ec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d59e4:	5d5b      	ldrb	r3, [r3, r5]
   d59e6:	7013      	strb	r3, [r2, #0]
}
   d59e8:	bd30      	pop	{r4, r5, pc}
   d59ea:	bf00      	nop
   d59ec:	000d7148 	.word	0x000d7148

000d59f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d59f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d59f4:	4606      	mov	r6, r0
   d59f6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d59f8:	7800      	ldrb	r0, [r0, #0]
{
   d59fa:	460c      	mov	r4, r1
    CHECK(lock());
   d59fc:	f7ff ffbc 	bl	d5978 <_ZN8SPIClass4lockEv.isra.0>
   d5a00:	2800      	cmp	r0, #0
   d5a02:	db1b      	blt.n	d5a3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5a04:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5a06:	2214      	movs	r2, #20
   d5a08:	2100      	movs	r1, #0
   d5a0a:	a809      	add	r0, sp, #36	; 0x24
   d5a0c:	f000 ffc0 	bl	d6990 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5a10:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5a12:	2200      	movs	r2, #0
   d5a14:	a909      	add	r1, sp, #36	; 0x24
   d5a16:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5a18:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5a1c:	f7ff fb96 	bl	d514c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d5a20:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5a24:	b113      	cbz	r3, d5a2c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5a26:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5a2a:	b155      	cbz	r5, d5a42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5a2c:	2700      	movs	r7, #0
   d5a2e:	46b9      	mov	r9, r7
   d5a30:	46b8      	mov	r8, r7
   d5a32:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5a34:	7923      	ldrb	r3, [r4, #4]
   d5a36:	b15d      	cbz	r5, d5a50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5a38:	b1c3      	cbz	r3, d5a6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5a3a:	2000      	movs	r0, #0
}
   d5a3c:	b00f      	add	sp, #60	; 0x3c
   d5a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d5a42:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5a46:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5a4a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d5a4e:	e7f1      	b.n	d5a34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d5a50:	2b00      	cmp	r3, #0
   d5a52:	d135      	bne.n	d5ac0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d5a54:	68a3      	ldr	r3, [r4, #8]
   d5a56:	4543      	cmp	r3, r8
   d5a58:	d108      	bne.n	d5a6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5a5a:	f88d 9020 	strb.w	r9, [sp, #32]
   d5a5e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5a62:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5a66:	89a3      	ldrh	r3, [r4, #12]
   d5a68:	429a      	cmp	r2, r3
   d5a6a:	d0e6      	beq.n	d5a3a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5a6c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5a6e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5a70:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5a74:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5a76:	ab04      	add	r3, sp, #16
   d5a78:	f10d 020f 	add.w	r2, sp, #15
   d5a7c:	f7ff ffa2 	bl	d59c4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5a80:	7921      	ldrb	r1, [r4, #4]
   d5a82:	b985      	cbnz	r5, d5aa6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5a84:	b989      	cbnz	r1, d5aaa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5a86:	68a3      	ldr	r3, [r4, #8]
   d5a88:	4543      	cmp	r3, r8
   d5a8a:	d30e      	bcc.n	d5aaa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5a8c:	f88d 9020 	strb.w	r9, [sp, #32]
   d5a90:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5a94:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5a98:	89a3      	ldrh	r3, [r4, #12]
   d5a9a:	429a      	cmp	r2, r3
   d5a9c:	d105      	bne.n	d5aaa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5a9e:	9b04      	ldr	r3, [sp, #16]
   d5aa0:	4543      	cmp	r3, r8
   d5aa2:	d102      	bne.n	d5aaa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5aa4:	e7c9      	b.n	d5a3a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5aa6:	2900      	cmp	r1, #0
   d5aa8:	d1f9      	bne.n	d5a9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5aaa:	2300      	movs	r3, #0
   d5aac:	9301      	str	r3, [sp, #4]
   d5aae:	7b63      	ldrb	r3, [r4, #13]
   d5ab0:	9300      	str	r3, [sp, #0]
   d5ab2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5ab6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5ab8:	7830      	ldrb	r0, [r6, #0]
   d5aba:	f7ff fb4f 	bl	d515c <hal_spi_set_settings>
   d5abe:	e7bc      	b.n	d5a3a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5ac0:	e9cd 5500 	strd	r5, r5, [sp]
   d5ac4:	462b      	mov	r3, r5
   d5ac6:	462a      	mov	r2, r5
   d5ac8:	2101      	movs	r1, #1
   d5aca:	e7f5      	b.n	d5ab8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5acc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5acc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5ace:	7800      	ldrb	r0, [r0, #0]
   d5ad0:	f7ff fb24 	bl	d511c <hal_spi_transfer>
}
   d5ad4:	b2c0      	uxtb	r0, r0
   d5ad6:	bd08      	pop	{r3, pc}

000d5ad8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d5ad8:	b510      	push	{r4, lr}
   d5ada:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5adc:	f7ff fa36 	bl	d4f4c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d5ae0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d5ae2:	6823      	ldr	r3, [r4, #0]
   d5ae4:	4620      	mov	r0, r4
   d5ae6:	695b      	ldr	r3, [r3, #20]
   d5ae8:	4798      	blx	r3
    if (c >= 0) return c;
   d5aea:	2800      	cmp	r0, #0
   d5aec:	da08      	bge.n	d5b00 <_ZN6Stream9timedReadEv+0x28>
   d5aee:	f7ff fa2d 	bl	d4f4c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d5af2:	68e3      	ldr	r3, [r4, #12]
   d5af4:	1ac0      	subs	r0, r0, r3
   d5af6:	68a3      	ldr	r3, [r4, #8]
   d5af8:	4298      	cmp	r0, r3
   d5afa:	d3f2      	bcc.n	d5ae2 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d5afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5b00:	bd10      	pop	{r4, pc}

000d5b02 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d5b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b04:	4606      	mov	r6, r0
   d5b06:	460d      	mov	r5, r1
   d5b08:	4617      	mov	r7, r2
  size_t count = 0;
   d5b0a:	2400      	movs	r4, #0
  while (count < length) {
   d5b0c:	42bc      	cmp	r4, r7
   d5b0e:	d007      	beq.n	d5b20 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d5b10:	4630      	mov	r0, r6
   d5b12:	f7ff ffe1 	bl	d5ad8 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d5b16:	1e03      	subs	r3, r0, #0
   d5b18:	db02      	blt.n	d5b20 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d5b1a:	552b      	strb	r3, [r5, r4]
    count++;
   d5b1c:	3401      	adds	r4, #1
  while (count < length) {
   d5b1e:	e7f5      	b.n	d5b0c <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d5b20:	4620      	mov	r0, r4
   d5b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b24 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5b24:	b510      	push	{r4, lr}
   d5b26:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5b28:	6800      	ldr	r0, [r0, #0]
   d5b2a:	b118      	cbz	r0, d5b34 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5b2c:	f7ff fc5a 	bl	d53e4 <free>
            wakeupSource_ = nullptr;
   d5b30:	2300      	movs	r3, #0
   d5b32:	6023      	str	r3, [r4, #0]
        }
    }
   d5b34:	bd10      	pop	{r4, pc}

000d5b36 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5b36:	b510      	push	{r4, lr}
   d5b38:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5b3a:	f7ff fff3 	bl	d5b24 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5b3e:	4620      	mov	r0, r4
   d5b40:	bd10      	pop	{r4, pc}
	...

000d5b44 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b44:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5b46:	4b09      	ldr	r3, [pc, #36]	; (d5b6c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5b48:	4c09      	ldr	r4, [pc, #36]	; (d5b70 <_GLOBAL__sub_I_System+0x2c>)
   d5b4a:	2202      	movs	r2, #2
   d5b4c:	2000      	movs	r0, #0
   d5b4e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5b50:	4b08      	ldr	r3, [pc, #32]	; (d5b74 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5b52:	6020      	str	r0, [r4, #0]
   d5b54:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5b56:	71a0      	strb	r0, [r4, #6]
   d5b58:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b5a:	f7ff fb9f 	bl	d529c <set_system_mode>
SystemClass System;
   d5b5e:	4620      	mov	r0, r4
   d5b60:	4a05      	ldr	r2, [pc, #20]	; (d5b78 <_GLOBAL__sub_I_System+0x34>)
   d5b62:	4906      	ldr	r1, [pc, #24]	; (d5b7c <_GLOBAL__sub_I_System+0x38>)
   d5b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5b68:	f000 bdd2 	b.w	d6710 <__aeabi_atexit>
   d5b6c:	2003e684 	.word	0x2003e684
   d5b70:	2003e678 	.word	0x2003e678
   d5b74:	ffff0000 	.word	0xffff0000
   d5b78:	2003e5bc 	.word	0x2003e5bc
   d5b7c:	000d5b37 	.word	0x000d5b37

000d5b80 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d5b80:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5b82:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d5b84:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5b88:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5b8a:	2201      	movs	r2, #1
   d5b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5b90:	f10d 0107 	add.w	r1, sp, #7
   d5b94:	47a0      	blx	r4
}
   d5b96:	b002      	add	sp, #8
   d5b98:	bd10      	pop	{r4, pc}

000d5b9a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5b9a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5b9c:	6803      	ldr	r3, [r0, #0]
   d5b9e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5ba4:	46a4      	mov	ip, r4
}
   d5ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5baa:	4760      	bx	ip

000d5bac <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5bac:	b513      	push	{r0, r1, r4, lr}
   d5bae:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d5bb0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5bb2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d5bb6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d5bb8:	f10d 0107 	add.w	r1, sp, #7
   d5bbc:	2201      	movs	r2, #1
   d5bbe:	47a0      	blx	r4
}
   d5bc0:	b002      	add	sp, #8
   d5bc2:	bd10      	pop	{r4, pc}

000d5bc4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d5bc4:	4770      	bx	lr

000d5bc6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5bc6:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5bc8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d5bca:	681a      	ldr	r2, [r3, #0]
   d5bcc:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d5bce:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d5bd0:	da10      	bge.n	d5bf4 <_ZN9TCPClient9connectedEv+0x2e>
   d5bd2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5bd6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5bda:	429a      	cmp	r2, r3
   d5bdc:	d10a      	bne.n	d5bf4 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d5bde:	6803      	ldr	r3, [r0, #0]
   d5be0:	691b      	ldr	r3, [r3, #16]
   d5be2:	4798      	blx	r3
        if (!rv) {
   d5be4:	4604      	mov	r4, r0
   d5be6:	b928      	cbnz	r0, d5bf4 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d5be8:	682b      	ldr	r3, [r5, #0]
   d5bea:	4628      	mov	r0, r5
   d5bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5bee:	4798      	blx	r3
        rv = available();
   d5bf0:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d5bf2:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d5bf4:	2001      	movs	r0, #1
   d5bf6:	e7fc      	b.n	d5bf2 <_ZN9TCPClient9connectedEv+0x2c>

000d5bf8 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d5bf8:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d5bfa:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d5bfc:	43c0      	mvns	r0, r0
   d5bfe:	0fc0      	lsrs	r0, r0, #31
   d5c00:	4770      	bx	lr

000d5c02 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5c02:	4770      	bx	lr

000d5c04 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5c04:	4b06      	ldr	r3, [pc, #24]	; (d5c20 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5c06:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5c08:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d5c0a:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5c0e:	d005      	beq.n	d5c1c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5c10:	4608      	mov	r0, r1
   d5c12:	f000 fd87 	bl	d6724 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5c16:	2800      	cmp	r0, #0
	return nullptr;
   d5c18:	bf08      	it	eq
   d5c1a:	2400      	moveq	r4, #0
      }
   d5c1c:	4620      	mov	r0, r4
   d5c1e:	bd10      	pop	{r4, pc}
   d5c20:	000d7088 	.word	0x000d7088

000d5c24 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5c24:	b510      	push	{r4, lr}
   d5c26:	21ac      	movs	r1, #172	; 0xac
   d5c28:	4604      	mov	r4, r0
   d5c2a:	f000 fd76 	bl	d671a <_ZdlPvj>
   d5c2e:	4620      	mov	r0, r4
   d5c30:	bd10      	pop	{r4, pc}

000d5c32 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d5c32:	f7fe ba32 	b.w	d409a <_ZdlPv>

000d5c36 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d5c3a:	f04f 0800 	mov.w	r8, #0
   d5c3e:	b086      	sub	sp, #24
   d5c40:	461d      	mov	r5, r3
   d5c42:	f8c0 8004 	str.w	r8, [r0, #4]
   d5c46:	4604      	mov	r4, r0
   d5c48:	460e      	mov	r6, r1
   d5c4a:	4617      	mov	r7, r2
    struct timeval tv = {};
   d5c4c:	4641      	mov	r1, r8
   d5c4e:	2210      	movs	r2, #16
   d5c50:	a802      	add	r0, sp, #8
   d5c52:	f000 fe9d 	bl	d6990 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5c56:	1c6b      	adds	r3, r5, #1
   d5c58:	d009      	beq.n	d5c6e <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d5c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5c5e:	fbb5 f3f0 	udiv	r3, r5, r0
   d5c62:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d5c66:	fb00 5313 	mls	r3, r0, r3, r5
   d5c6a:	4358      	muls	r0, r3
   d5c6c:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d5c6e:	6960      	ldr	r0, [r4, #20]
   d5c70:	2310      	movs	r3, #16
   d5c72:	9300      	str	r3, [sp, #0]
   d5c74:	6800      	ldr	r0, [r0, #0]
   d5c76:	ab02      	add	r3, sp, #8
   d5c78:	f241 0205 	movw	r2, #4101	; 0x1005
   d5c7c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5c80:	f7ff fa14 	bl	d50ac <sock_setsockopt>
    if (ret < 0) {
   d5c84:	2800      	cmp	r0, #0
   d5c86:	da07      	bge.n	d5c98 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d5c88:	f7ff fbc4 	bl	d5414 <__errno>
   d5c8c:	6803      	ldr	r3, [r0, #0]
   d5c8e:	6063      	str	r3, [r4, #4]
        return 0;
   d5c90:	2000      	movs	r0, #0
}
   d5c92:	b006      	add	sp, #24
   d5c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d5c98:	6960      	ldr	r0, [r4, #20]
   d5c9a:	2300      	movs	r3, #0
   d5c9c:	6800      	ldr	r0, [r0, #0]
   d5c9e:	463a      	mov	r2, r7
   d5ca0:	4631      	mov	r1, r6
   d5ca2:	f7ff fa23 	bl	d50ec <sock_send>
    if (ret < 0) {
   d5ca6:	1e03      	subs	r3, r0, #0
   d5ca8:	dbee      	blt.n	d5c88 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d5caa:	4618      	mov	r0, r3
   d5cac:	e7f1      	b.n	d5c92 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d5cb0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5cb0:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d5cb2:	6984      	ldr	r4, [r0, #24]
   d5cb4:	4b0a      	ldr	r3, [pc, #40]	; (d5ce0 <_ZN9TCPClientD1Ev+0x30>)
   d5cb6:	6003      	str	r3, [r0, #0]
   d5cb8:	4605      	mov	r5, r0
   d5cba:	b17c      	cbz	r4, d5cdc <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d5cbc:	6863      	ldr	r3, [r4, #4]
   d5cbe:	3b01      	subs	r3, #1
   d5cc0:	6063      	str	r3, [r4, #4]
   d5cc2:	b95b      	cbnz	r3, d5cdc <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d5cc4:	6823      	ldr	r3, [r4, #0]
   d5cc6:	4620      	mov	r0, r4
   d5cc8:	689b      	ldr	r3, [r3, #8]
   d5cca:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5ccc:	68a3      	ldr	r3, [r4, #8]
   d5cce:	3b01      	subs	r3, #1
   d5cd0:	60a3      	str	r3, [r4, #8]
   d5cd2:	b91b      	cbnz	r3, d5cdc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5cd4:	6823      	ldr	r3, [r4, #0]
   d5cd6:	4620      	mov	r0, r4
   d5cd8:	68db      	ldr	r3, [r3, #12]
   d5cda:	4798      	blx	r3
   d5cdc:	4628      	mov	r0, r5
   d5cde:	bd38      	pop	{r3, r4, r5, pc}
   d5ce0:	000d718c 	.word	0x000d718c

000d5ce4 <_ZN9TCPClientD0Ev>:
   d5ce4:	b510      	push	{r4, lr}
   d5ce6:	4604      	mov	r4, r0
   d5ce8:	f7ff ffe2 	bl	d5cb0 <_ZN9TCPClientD1Ev>
   d5cec:	4620      	mov	r0, r4
   d5cee:	211c      	movs	r1, #28
   d5cf0:	f000 fd13 	bl	d671a <_ZdlPvj>
   d5cf4:	4620      	mov	r0, r4
   d5cf6:	bd10      	pop	{r4, pc}

000d5cf8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d5cf8:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5cfa:	694d      	ldr	r5, [r1, #20]
   d5cfc:	4b05      	ldr	r3, [pc, #20]	; (d5d14 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d5cfe:	4604      	mov	r4, r0
   d5d00:	358c      	adds	r5, #140	; 0x8c
   d5d02:	f844 3b04 	str.w	r3, [r4], #4
   d5d06:	4606      	mov	r6, r0
   d5d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d0c:	682b      	ldr	r3, [r5, #0]
   d5d0e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d5d10:	4630      	mov	r0, r6
   d5d12:	bd70      	pop	{r4, r5, r6, pc}
   d5d14:	000d70fc 	.word	0x000d70fc

000d5d18 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d5d18:	b510      	push	{r4, lr}
   d5d1a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5d1c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5d20:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5d24:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d5d26:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5d28:	d005      	beq.n	d5d36 <_ZN9TCPClient4peekEv+0x1e>
   d5d2a:	6963      	ldr	r3, [r4, #20]
   d5d2c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d5d30:	4413      	add	r3, r2
   d5d32:	7918      	ldrb	r0, [r3, #4]
}
   d5d34:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5d36:	6803      	ldr	r3, [r0, #0]
   d5d38:	691b      	ldr	r3, [r3, #16]
   d5d3a:	4798      	blx	r3
   d5d3c:	2800      	cmp	r0, #0
   d5d3e:	d1f4      	bne.n	d5d2a <_ZN9TCPClient4peekEv+0x12>
   d5d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5d44:	e7f6      	b.n	d5d34 <_ZN9TCPClient4peekEv+0x1c>

000d5d46 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d5d46:	b510      	push	{r4, lr}
   d5d48:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5d4a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5d4e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5d52:	429a      	cmp	r2, r3
int TCPClient::read() {
   d5d54:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5d56:	d008      	beq.n	d5d6a <_ZN9TCPClient4readEv+0x24>
   d5d58:	6963      	ldr	r3, [r4, #20]
   d5d5a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d5d5e:	1c51      	adds	r1, r2, #1
   d5d60:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d5d64:	4413      	add	r3, r2
   d5d66:	7918      	ldrb	r0, [r3, #4]
}
   d5d68:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5d6a:	6803      	ldr	r3, [r0, #0]
   d5d6c:	691b      	ldr	r3, [r3, #16]
   d5d6e:	4798      	blx	r3
   d5d70:	2800      	cmp	r0, #0
   d5d72:	d1f1      	bne.n	d5d58 <_ZN9TCPClient4readEv+0x12>
   d5d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5d78:	e7f6      	b.n	d5d68 <_ZN9TCPClient4readEv+0x22>

000d5d7a <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d5d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d7c:	6943      	ldr	r3, [r0, #20]
   d5d7e:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d5d80:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5d84:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5d88:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d5d8a:	4605      	mov	r5, r0
   d5d8c:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d5d8e:	d016      	beq.n	d5dbe <_ZN9TCPClient4readEPhj+0x44>
   d5d90:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d5d92:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d5d96:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d5d9a:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d5d9c:	42bc      	cmp	r4, r7
   d5d9e:	bf28      	it	cs
   d5da0:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d5da2:	3304      	adds	r3, #4
   d5da4:	4622      	mov	r2, r4
   d5da6:	4419      	add	r1, r3
   d5da8:	4630      	mov	r0, r6
   d5daa:	f000 fde3 	bl	d6974 <memcpy>
   d5dae:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d5db0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5db4:	4423      	add	r3, r4
   d5db6:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d5dba:	4620      	mov	r0, r4
   d5dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d5dbe:	6803      	ldr	r3, [r0, #0]
   d5dc0:	691b      	ldr	r3, [r3, #16]
   d5dc2:	4798      	blx	r3
   d5dc4:	2800      	cmp	r0, #0
   d5dc6:	d1e3      	bne.n	d5d90 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d5dc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d5dcc:	e7f5      	b.n	d5dba <_ZN9TCPClient4readEPhj+0x40>

000d5dce <_ZN9TCPClient12flush_bufferEv>:
   d5dce:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d5dd0:	2300      	movs	r3, #0
   d5dd2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d5dd6:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d5dd8:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d5ddc:	4770      	bx	lr

000d5dde <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5de2:	461f      	mov	r7, r3
    stop();
   d5de4:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5de6:	460c      	mov	r4, r1
    stop();
   d5de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5dea:	b08a      	sub	sp, #40	; 0x28
   d5dec:	4605      	mov	r5, r0
   d5dee:	4616      	mov	r6, r2
    stop();
   d5df0:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d5df2:	7d23      	ldrb	r3, [r4, #20]
   d5df4:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d5df8:	2b04      	cmp	r3, #4
   d5dfa:	bf0c      	ite	eq
   d5dfc:	2002      	moveq	r0, #2
   d5dfe:	200a      	movne	r0, #10
   d5e00:	2206      	movs	r2, #6
   d5e02:	2101      	movs	r1, #1
   d5e04:	f7ff f97a 	bl	d50fc <sock_socket>
   d5e08:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d5e0c:	696b      	ldr	r3, [r5, #20]
   d5e0e:	681b      	ldr	r3, [r3, #0]
   d5e10:	2b00      	cmp	r3, #0
   d5e12:	da08      	bge.n	d5e26 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d5e14:	682b      	ldr	r3, [r5, #0]
   d5e16:	4628      	mov	r0, r5
   d5e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5e1a:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d5e1c:	4798      	blx	r3
}
   d5e1e:	4620      	mov	r0, r4
   d5e20:	b00a      	add	sp, #40	; 0x28
   d5e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d5e26:	4628      	mov	r0, r5
   d5e28:	f7ff ffd1 	bl	d5dce <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d5e2c:	b1b7      	cbz	r7, d5e5c <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d5e2e:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5e30:	a903      	add	r1, sp, #12
   d5e32:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d5e34:	9303      	str	r3, [sp, #12]
   d5e36:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5e3a:	f7ff f907 	bl	d504c <if_index_to_name>
   d5e3e:	2800      	cmp	r0, #0
   d5e40:	d1e8      	bne.n	d5e14 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d5e42:	6968      	ldr	r0, [r5, #20]
   d5e44:	2306      	movs	r3, #6
   d5e46:	9300      	str	r3, [sp, #0]
   d5e48:	6800      	ldr	r0, [r0, #0]
   d5e4a:	ab03      	add	r3, sp, #12
   d5e4c:	f241 020b 	movw	r2, #4107	; 0x100b
   d5e50:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5e54:	f7ff f92a 	bl	d50ac <sock_setsockopt>
   d5e58:	2800      	cmp	r0, #0
   d5e5a:	d1db      	bne.n	d5e14 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d5e5c:	221c      	movs	r2, #28
   d5e5e:	2100      	movs	r1, #0
   d5e60:	a803      	add	r0, sp, #12
   d5e62:	f000 fd95 	bl	d6990 <memset>
    if (ip.version() == 4) {
   d5e66:	7d23      	ldrb	r3, [r4, #20]
   d5e68:	2b04      	cmp	r3, #4
   d5e6a:	d11d      	bne.n	d5ea8 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d5e6c:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d5e70:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d5e72:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d5e76:	f7ff f901 	bl	d507c <inet_htons>
   d5e7a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d5e7e:	6860      	ldr	r0, [r4, #4]
   d5e80:	f7ff f8f4 	bl	d506c <inet_htonl>
   d5e84:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d5e86:	696b      	ldr	r3, [r5, #20]
   d5e88:	221c      	movs	r2, #28
   d5e8a:	6818      	ldr	r0, [r3, #0]
   d5e8c:	a903      	add	r1, sp, #12
   d5e8e:	f7ff f91d 	bl	d50cc <sock_connect>
   d5e92:	2800      	cmp	r0, #0
   d5e94:	d1be      	bne.n	d5e14 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d5e96:	3404      	adds	r4, #4
   d5e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5e9a:	696d      	ldr	r5, [r5, #20]
   d5e9c:	358c      	adds	r5, #140	; 0x8c
   d5e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5ea0:	6823      	ldr	r3, [r4, #0]
   d5ea2:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d5ea4:	2401      	movs	r4, #1
   d5ea6:	e7ba      	b.n	d5e1e <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d5ea8:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d5eac:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d5eae:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d5eb2:	f7ff f8e3 	bl	d507c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5eb6:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d5eb8:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5ebc:	1d23      	adds	r3, r4, #4
   d5ebe:	f104 0714 	add.w	r7, r4, #20
   d5ec2:	6818      	ldr	r0, [r3, #0]
   d5ec4:	6859      	ldr	r1, [r3, #4]
   d5ec6:	4632      	mov	r2, r6
   d5ec8:	c203      	stmia	r2!, {r0, r1}
   d5eca:	3308      	adds	r3, #8
   d5ecc:	42bb      	cmp	r3, r7
   d5ece:	4616      	mov	r6, r2
   d5ed0:	d1f7      	bne.n	d5ec2 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d5ed2:	e7d8      	b.n	d5e86 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d5ed4 <_ZN9TCPClient9availableEv>:
{
   d5ed4:	b530      	push	{r4, r5, lr}
   d5ed6:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d5ed8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d5edc:	b08b      	sub	sp, #44	; 0x2c
   d5ede:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d5ee0:	b12b      	cbz	r3, d5eee <_ZN9TCPClient9availableEv+0x1a>
   d5ee2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d5ee6:	429a      	cmp	r2, r3
   d5ee8:	d101      	bne.n	d5eee <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d5eea:	f7ff ff70 	bl	d5dce <_ZN9TCPClient12flush_bufferEv>
   d5eee:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d5ef0:	6808      	ldr	r0, [r1, #0]
   d5ef2:	2800      	cmp	r0, #0
   d5ef4:	db18      	blt.n	d5f28 <_ZN9TCPClient9availableEv+0x54>
   d5ef6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d5efa:	2d7f      	cmp	r5, #127	; 0x7f
   d5efc:	d814      	bhi.n	d5f28 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d5efe:	3104      	adds	r1, #4
   d5f00:	2308      	movs	r3, #8
   d5f02:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d5f06:	4429      	add	r1, r5
   d5f08:	f7ff f8e8 	bl	d50dc <sock_recv>
            if (ret > 0) {
   d5f0c:	2800      	cmp	r0, #0
   d5f0e:	dd13      	ble.n	d5f38 <_ZN9TCPClient9availableEv+0x64>
   d5f10:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d5f12:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5f16:	b90a      	cbnz	r2, d5f1c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d5f18:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d5f1c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d5f1e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5f22:	4410      	add	r0, r2
   d5f24:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d5f28:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d5f2a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d5f2e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d5f32:	1ac0      	subs	r0, r0, r3
   d5f34:	b00b      	add	sp, #44	; 0x2c
   d5f36:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d5f38:	f7ff fa6c 	bl	d5414 <__errno>
   d5f3c:	6803      	ldr	r3, [r0, #0]
   d5f3e:	2b0b      	cmp	r3, #11
   d5f40:	d0f2      	beq.n	d5f28 <_ZN9TCPClient9availableEv+0x54>
   d5f42:	f7ff fa67 	bl	d5414 <__errno>
   d5f46:	6803      	ldr	r3, [r0, #0]
   d5f48:	2b0b      	cmp	r3, #11
   d5f4a:	d0ed      	beq.n	d5f28 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d5f4c:	2320      	movs	r3, #32
   d5f4e:	2500      	movs	r5, #0
   d5f50:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d5f54:	f7ff fa5e 	bl	d5414 <__errno>
   d5f58:	6803      	ldr	r3, [r0, #0]
   d5f5a:	9301      	str	r3, [sp, #4]
   d5f5c:	4b08      	ldr	r3, [pc, #32]	; (d5f80 <_ZN9TCPClient9availableEv+0xac>)
   d5f5e:	4909      	ldr	r1, [pc, #36]	; (d5f84 <_ZN9TCPClient9availableEv+0xb0>)
   d5f60:	9300      	str	r3, [sp, #0]
   d5f62:	aa02      	add	r2, sp, #8
   d5f64:	462b      	mov	r3, r5
   d5f66:	2032      	movs	r0, #50	; 0x32
   d5f68:	f7ff f990 	bl	d528c <log_message>
                    sock_close(d_->sock);
   d5f6c:	6963      	ldr	r3, [r4, #20]
   d5f6e:	6818      	ldr	r0, [r3, #0]
   d5f70:	f7ff f8a4 	bl	d50bc <sock_close>
   d5f74:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d5f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5f7a:	601a      	str	r2, [r3, #0]
   d5f7c:	e7d4      	b.n	d5f28 <_ZN9TCPClient9availableEv+0x54>
   d5f7e:	bf00      	nop
   d5f80:	000d7157 	.word	0x000d7157
   d5f84:	000d7150 	.word	0x000d7150

000d5f88 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d5f88:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d5f8a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d5f8c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d5f8e:	6818      	ldr	r0, [r3, #0]
   d5f90:	2800      	cmp	r0, #0
   d5f92:	db01      	blt.n	d5f98 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5f94:	f7ff f892 	bl	d50bc <sock_close>
   d5f98:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d5f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5f9e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d5fa0:	6960      	ldr	r0, [r4, #20]
   d5fa2:	2211      	movs	r2, #17
   d5fa4:	2100      	movs	r1, #0
   d5fa6:	308c      	adds	r0, #140	; 0x8c
   d5fa8:	f000 fcf2 	bl	d6990 <memset>
    flush_buffer();
   d5fac:	4620      	mov	r0, r4
}
   d5fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d5fb2:	f7ff bf0c 	b.w	d5dce <_ZN9TCPClient12flush_bufferEv>

000d5fb6 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d5fb6:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d5fb8:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d5fba:	4604      	mov	r4, r0
          total(0) {
   d5fbc:	6001      	str	r1, [r0, #0]
   d5fbe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d5fc2:	3088      	adds	r0, #136	; 0x88
   d5fc4:	f7ff fb14 	bl	d55f0 <_ZN9IPAddressC1Ev>
}
   d5fc8:	4620      	mov	r0, r4
   d5fca:	bd10      	pop	{r4, pc}

000d5fcc <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d5fcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5fce:	2300      	movs	r3, #0
   d5fd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5fd4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d5fd8:	4a0e      	ldr	r2, [pc, #56]	; (d6014 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d5fda:	6103      	str	r3, [r0, #16]
   d5fdc:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5fde:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d5fe0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5fe2:	20ac      	movs	r0, #172	; 0xac
   d5fe4:	9101      	str	r1, [sp, #4]
   d5fe6:	f7fe f854 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d5fea:	1e05      	subs	r5, r0, #0
   d5fec:	f105 060c 	add.w	r6, r5, #12
   d5ff0:	d008      	beq.n	d6004 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d5ff2:	2301      	movs	r3, #1
   d5ff4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d5ff8:	4b07      	ldr	r3, [pc, #28]	; (d6018 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5ffa:	9901      	ldr	r1, [sp, #4]
   d5ffc:	602b      	str	r3, [r5, #0]
   d5ffe:	4630      	mov	r0, r6
   d6000:	f7ff ffd9 	bl	d5fb6 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d6004:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d6006:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d600a:	f7ff fee0 	bl	d5dce <_ZN9TCPClient12flush_bufferEv>
}
   d600e:	b002      	add	sp, #8
   d6010:	bd70      	pop	{r4, r5, r6, pc}
   d6012:	bf00      	nop
   d6014:	000d718c 	.word	0x000d718c
   d6018:	000d7170 	.word	0x000d7170

000d601c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d601c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d601e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   d6022:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6024:	f7ff ffd2 	bl	d5fcc <_ZN9TCPClientC1Ei>
}
   d6028:	4620      	mov	r0, r4
   d602a:	bd10      	pop	{r4, pc}

000d602c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d602c:	b510      	push	{r4, lr}
   d602e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6030:	6800      	ldr	r0, [r0, #0]
   d6032:	2800      	cmp	r0, #0
   d6034:	db01      	blt.n	d603a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6036:	f7ff f841 	bl	d50bc <sock_close>
    }
}
   d603a:	4620      	mov	r0, r4
   d603c:	bd10      	pop	{r4, pc}

000d603e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d603e:	300c      	adds	r0, #12
   d6040:	f7ff bff4 	b.w	d602c <_ZN9TCPClient4DataD1Ev>

000d6044 <_ZN9IPAddressaSIPKhEERS_T_>:
    IPAddress& operator=(T address) {
   d6044:	b570      	push	{r4, r5, r6, lr}
   d6046:	b086      	sub	sp, #24
   d6048:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d604a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d604c:	4668      	mov	r0, sp
   d604e:	f7ff fb1f 	bl	d5690 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6054:	1d34      	adds	r4, r6, #4
   d6056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6058:	682b      	ldr	r3, [r5, #0]
   d605a:	7023      	strb	r3, [r4, #0]
    }
   d605c:	4630      	mov	r0, r6
   d605e:	b006      	add	sp, #24
   d6060:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6064 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6068:	4698      	mov	r8, r3
    stop();
   d606a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d606c:	b093      	sub	sp, #76	; 0x4c
   d606e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d6070:	2400      	movs	r4, #0
    stop();
   d6072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6074:	4606      	mov	r6, r0
   d6076:	4617      	mov	r7, r2
    stop();
   d6078:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d607a:	4628      	mov	r0, r5
   d607c:	466b      	mov	r3, sp
   d607e:	4622      	mov	r2, r4
   d6080:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d6082:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6084:	f7ff f80a 	bl	d509c <netdb_getaddrinfo>
   d6088:	4605      	mov	r5, r0
   d608a:	2800      	cmp	r0, #0
   d608c:	d163      	bne.n	d6156 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d608e:	9b00      	ldr	r3, [sp, #0]
   d6090:	2b00      	cmp	r3, #0
   d6092:	d04b      	beq.n	d612c <_ZN9TCPClient7connectEPKctm+0xc8>
   d6094:	695b      	ldr	r3, [r3, #20]
   d6096:	2b00      	cmp	r3, #0
   d6098:	d048      	beq.n	d612c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d609a:	a806      	add	r0, sp, #24
   d609c:	f7ff faa8 	bl	d55f0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d60a0:	9b00      	ldr	r3, [sp, #0]
   d60a2:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d60a4:	7863      	ldrb	r3, [r4, #1]
   d60a6:	2b02      	cmp	r3, #2
   d60a8:	d104      	bne.n	d60b4 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d60aa:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d60ac:	a806      	add	r0, sp, #24
   d60ae:	f7ff ffc9 	bl	d6044 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d60b2:	e026      	b.n	d6102 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d60b4:	2b0a      	cmp	r3, #10
   d60b6:	d124      	bne.n	d6102 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d60b8:	2211      	movs	r2, #17
   d60ba:	4629      	mov	r1, r5
   d60bc:	a801      	add	r0, sp, #4
   d60be:	f000 fc67 	bl	d6990 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d60c2:	68a3      	ldr	r3, [r4, #8]
   d60c4:	2b00      	cmp	r3, #0
   d60c6:	d038      	beq.n	d613a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d60c8:	f104 0308 	add.w	r3, r4, #8
   d60cc:	f10d 0c04 	add.w	ip, sp, #4
   d60d0:	3418      	adds	r4, #24
   d60d2:	6818      	ldr	r0, [r3, #0]
   d60d4:	6859      	ldr	r1, [r3, #4]
   d60d6:	4662      	mov	r2, ip
   d60d8:	c203      	stmia	r2!, {r0, r1}
   d60da:	3308      	adds	r3, #8
   d60dc:	42a3      	cmp	r3, r4
   d60de:	4694      	mov	ip, r2
   d60e0:	d1f7      	bne.n	d60d2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d60e2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d60e4:	a901      	add	r1, sp, #4
   d60e6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d60e8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d60ec:	f7ff fa8e 	bl	d560c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d60f0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d60f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d60f8:	ac07      	add	r4, sp, #28
   d60fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60fc:	f8dc 3000 	ldr.w	r3, [ip]
   d6100:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d6102:	a806      	add	r0, sp, #24
   d6104:	f7ff fa94 	bl	d5630 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6108:	b180      	cbz	r0, d612c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d610a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d610c:	ad07      	add	r5, sp, #28
   d610e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6112:	4b12      	ldr	r3, [pc, #72]	; (d615c <_ZN9TCPClient7connectEPKctm+0xf8>)
   d6114:	930c      	str	r3, [sp, #48]	; 0x30
   d6116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6118:	ac0d      	add	r4, sp, #52	; 0x34
   d611a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d611c:	682b      	ldr	r3, [r5, #0]
   d611e:	7023      	strb	r3, [r4, #0]
   d6120:	463a      	mov	r2, r7
   d6122:	4643      	mov	r3, r8
   d6124:	a90c      	add	r1, sp, #48	; 0x30
   d6126:	4630      	mov	r0, r6
   d6128:	47c8      	blx	r9
   d612a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d612c:	9800      	ldr	r0, [sp, #0]
   d612e:	f7fe ffad 	bl	d508c <netdb_freeaddrinfo>
}
   d6132:	4628      	mov	r0, r5
   d6134:	b013      	add	sp, #76	; 0x4c
   d6136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d613a:	68e3      	ldr	r3, [r4, #12]
   d613c:	2b00      	cmp	r3, #0
   d613e:	d1c3      	bne.n	d60c8 <_ZN9TCPClient7connectEPKctm+0x64>
   d6140:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6144:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d6148:	f7fe ff90 	bl	d506c <inet_htonl>
   d614c:	4581      	cmp	r9, r0
   d614e:	d1bb      	bne.n	d60c8 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d6150:	f104 0114 	add.w	r1, r4, #20
   d6154:	e7aa      	b.n	d60ac <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6156:	4625      	mov	r5, r4
   d6158:	e7e8      	b.n	d612c <_ZN9TCPClient7connectEPKctm+0xc8>
   d615a:	bf00      	nop
   d615c:	000d70fc 	.word	0x000d70fc

000d6160 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6160:	4b02      	ldr	r3, [pc, #8]	; (d616c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6162:	681a      	ldr	r2, [r3, #0]
   d6164:	4b02      	ldr	r3, [pc, #8]	; (d6170 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6166:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6168:	4770      	bx	lr
   d616a:	bf00      	nop
   d616c:	2003e554 	.word	0x2003e554
   d6170:	2003e688 	.word	0x2003e688

000d6174 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6174:	4770      	bx	lr

000d6176 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6176:	7441      	strb	r1, [r0, #17]
}
   d6178:	4770      	bx	lr

000d617a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d617a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d617c:	7c00      	ldrb	r0, [r0, #16]
   d617e:	f7ff f83d 	bl	d51fc <hal_usart_available_data_for_write>
}
   d6182:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6186:	bd08      	pop	{r3, pc}

000d6188 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6188:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d618a:	7c00      	ldrb	r0, [r0, #16]
   d618c:	f7ff f80e 	bl	d51ac <hal_usart_available>
}
   d6190:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6194:	bd08      	pop	{r3, pc}

000d6196 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6196:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6198:	7c00      	ldrb	r0, [r0, #16]
   d619a:	f7ff f817 	bl	d51cc <hal_usart_peek>
}
   d619e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d61a2:	bd08      	pop	{r3, pc}

000d61a4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d61a4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d61a6:	7c00      	ldrb	r0, [r0, #16]
   d61a8:	f7ff f808 	bl	d51bc <hal_usart_read>
}
   d61ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d61b0:	bd08      	pop	{r3, pc}

000d61b2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d61b2:	7c00      	ldrb	r0, [r0, #16]
   d61b4:	f7ff b812 	b.w	d51dc <hal_usart_flush>

000d61b8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d61b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d61ba:	7c45      	ldrb	r5, [r0, #17]
{
   d61bc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d61be:	b12d      	cbz	r5, d61cc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d61c0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d61c2:	b003      	add	sp, #12
   d61c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d61c8:	f7fe bfe8 	b.w	d519c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d61cc:	7c00      	ldrb	r0, [r0, #16]
   d61ce:	9101      	str	r1, [sp, #4]
   d61d0:	f7ff f814 	bl	d51fc <hal_usart_available_data_for_write>
   d61d4:	2800      	cmp	r0, #0
   d61d6:	9901      	ldr	r1, [sp, #4]
   d61d8:	dcf2      	bgt.n	d61c0 <_ZN11USARTSerial5writeEh+0x8>
}
   d61da:	4628      	mov	r0, r5
   d61dc:	b003      	add	sp, #12
   d61de:	bd30      	pop	{r4, r5, pc}

000d61e0 <_ZN11USARTSerialD0Ev>:
   d61e0:	b510      	push	{r4, lr}
   d61e2:	2114      	movs	r1, #20
   d61e4:	4604      	mov	r4, r0
   d61e6:	f000 fa98 	bl	d671a <_ZdlPvj>
   d61ea:	4620      	mov	r0, r4
   d61ec:	bd10      	pop	{r4, pc}
	...

000d61f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d61f0:	b510      	push	{r4, lr}
   d61f2:	f04f 0c00 	mov.w	ip, #0
   d61f6:	4604      	mov	r4, r0
   d61f8:	4608      	mov	r0, r1
   d61fa:	4611      	mov	r1, r2
   d61fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6200:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6204:	4a04      	ldr	r2, [pc, #16]	; (d6218 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6206:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6208:	2201      	movs	r2, #1
  _serial = serial;
   d620a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d620c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d620e:	461a      	mov	r2, r3
   d6210:	f7fe ffbc 	bl	d518c <hal_usart_init>
}
   d6214:	4620      	mov	r0, r4
   d6216:	bd10      	pop	{r4, pc}
   d6218:	000d71f4 	.word	0x000d71f4

000d621c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d621c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d621e:	4c0e      	ldr	r4, [pc, #56]	; (d6258 <_Z22__fetch_global_Serial1v+0x3c>)
   d6220:	7821      	ldrb	r1, [r4, #0]
   d6222:	f3bf 8f5b 	dmb	ish
   d6226:	f011 0101 	ands.w	r1, r1, #1
   d622a:	d112      	bne.n	d6252 <_Z22__fetch_global_Serial1v+0x36>
   d622c:	4620      	mov	r0, r4
   d622e:	9101      	str	r1, [sp, #4]
   d6230:	f7fd ff40 	bl	d40b4 <__cxa_guard_acquire>
   d6234:	9901      	ldr	r1, [sp, #4]
   d6236:	b160      	cbz	r0, d6252 <_Z22__fetch_global_Serial1v+0x36>
   d6238:	4a08      	ldr	r2, [pc, #32]	; (d625c <_Z22__fetch_global_Serial1v+0x40>)
   d623a:	4b09      	ldr	r3, [pc, #36]	; (d6260 <_Z22__fetch_global_Serial1v+0x44>)
   d623c:	4809      	ldr	r0, [pc, #36]	; (d6264 <_Z22__fetch_global_Serial1v+0x48>)
   d623e:	f7ff ffd7 	bl	d61f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6242:	4620      	mov	r0, r4
   d6244:	f7fd ff3b 	bl	d40be <__cxa_guard_release>
   d6248:	4a07      	ldr	r2, [pc, #28]	; (d6268 <_Z22__fetch_global_Serial1v+0x4c>)
   d624a:	4908      	ldr	r1, [pc, #32]	; (d626c <_Z22__fetch_global_Serial1v+0x50>)
   d624c:	4805      	ldr	r0, [pc, #20]	; (d6264 <_Z22__fetch_global_Serial1v+0x48>)
   d624e:	f000 fa5f 	bl	d6710 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6252:	4804      	ldr	r0, [pc, #16]	; (d6264 <_Z22__fetch_global_Serial1v+0x48>)
   d6254:	b002      	add	sp, #8
   d6256:	bd10      	pop	{r4, pc}
   d6258:	2003e68c 	.word	0x2003e68c
   d625c:	2003e690 	.word	0x2003e690
   d6260:	2003e714 	.word	0x2003e714
   d6264:	2003e798 	.word	0x2003e798
   d6268:	2003e5bc 	.word	0x2003e5bc
   d626c:	000d6175 	.word	0x000d6175

000d6270 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6270:	7441      	strb	r1, [r0, #17]
}
   d6272:	4770      	bx	lr

000d6274 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6274:	4770      	bx	lr

000d6276 <_ZN9USBSerial4readEv>:
{
   d6276:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6278:	2100      	movs	r1, #0
   d627a:	7c00      	ldrb	r0, [r0, #16]
   d627c:	f7fe ffe6 	bl	d524c <HAL_USB_USART_Receive_Data>
}
   d6280:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6284:	bd08      	pop	{r3, pc}

000d6286 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6286:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6288:	2101      	movs	r1, #1
   d628a:	7c00      	ldrb	r0, [r0, #16]
   d628c:	f7fe ffde 	bl	d524c <HAL_USB_USART_Receive_Data>
}
   d6290:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6294:	bd08      	pop	{r3, pc}

000d6296 <_ZN9USBSerial17availableForWriteEv>:
{
   d6296:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6298:	7c00      	ldrb	r0, [r0, #16]
   d629a:	f7fe ffcf 	bl	d523c <HAL_USB_USART_Available_Data_For_Write>
}
   d629e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d62a2:	bd08      	pop	{r3, pc}

000d62a4 <_ZN9USBSerial9availableEv>:
{
   d62a4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d62a6:	7c00      	ldrb	r0, [r0, #16]
   d62a8:	f7fe ffc0 	bl	d522c <HAL_USB_USART_Available_Data>
}
   d62ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d62b0:	bd08      	pop	{r3, pc}

000d62b2 <_ZN9USBSerial5writeEh>:
{
   d62b2:	b513      	push	{r0, r1, r4, lr}
   d62b4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d62b6:	7c00      	ldrb	r0, [r0, #16]
{
   d62b8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d62ba:	f7fe ffbf 	bl	d523c <HAL_USB_USART_Available_Data_For_Write>
   d62be:	2800      	cmp	r0, #0
   d62c0:	9901      	ldr	r1, [sp, #4]
   d62c2:	dc01      	bgt.n	d62c8 <_ZN9USBSerial5writeEh+0x16>
   d62c4:	7c60      	ldrb	r0, [r4, #17]
   d62c6:	b120      	cbz	r0, d62d2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d62c8:	7c20      	ldrb	r0, [r4, #16]
   d62ca:	f7fe ffc7 	bl	d525c <HAL_USB_USART_Send_Data>
   d62ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d62d2:	b002      	add	sp, #8
   d62d4:	bd10      	pop	{r4, pc}

000d62d6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d62d6:	7c00      	ldrb	r0, [r0, #16]
   d62d8:	f7fe bfc8 	b.w	d526c <HAL_USB_USART_Flush_Data>

000d62dc <_ZN9USBSerialD0Ev>:
   d62dc:	b510      	push	{r4, lr}
   d62de:	2114      	movs	r1, #20
   d62e0:	4604      	mov	r4, r0
   d62e2:	f000 fa1a 	bl	d671a <_ZdlPvj>
   d62e6:	4620      	mov	r0, r4
   d62e8:	bd10      	pop	{r4, pc}
	...

000d62ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d62ec:	b510      	push	{r4, lr}
   d62ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d62f2:	4604      	mov	r4, r0
   d62f4:	4608      	mov	r0, r1
   d62f6:	2100      	movs	r1, #0
   d62f8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d62fc:	4b04      	ldr	r3, [pc, #16]	; (d6310 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d62fe:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6300:	2301      	movs	r3, #1
  _serial = serial;
   d6302:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6304:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6306:	4611      	mov	r1, r2
   d6308:	f7fe ff80 	bl	d520c <HAL_USB_USART_Init>
}
   d630c:	4620      	mov	r0, r4
   d630e:	bd10      	pop	{r4, pc}
   d6310:	000d7224 	.word	0x000d7224

000d6314 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6314:	7c00      	ldrb	r0, [r0, #16]
   d6316:	2200      	movs	r2, #0
   d6318:	f7fe bf80 	b.w	d521c <HAL_USB_USART_Begin>

000d631c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d631c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d631e:	2214      	movs	r2, #20
{
   d6320:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6322:	2100      	movs	r1, #0
   d6324:	f000 fb34 	bl	d6990 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6328:	4620      	mov	r0, r4
   d632a:	bd10      	pop	{r4, pc}

000d632c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d632c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d632e:	4c10      	ldr	r4, [pc, #64]	; (d6370 <_Z16_fetch_usbserialv+0x44>)
{
   d6330:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6332:	a803      	add	r0, sp, #12
   d6334:	f7ff fff2 	bl	d631c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6338:	7821      	ldrb	r1, [r4, #0]
   d633a:	f3bf 8f5b 	dmb	ish
   d633e:	f011 0101 	ands.w	r1, r1, #1
   d6342:	d111      	bne.n	d6368 <_Z16_fetch_usbserialv+0x3c>
   d6344:	4620      	mov	r0, r4
   d6346:	9101      	str	r1, [sp, #4]
   d6348:	f7fd feb4 	bl	d40b4 <__cxa_guard_acquire>
   d634c:	9901      	ldr	r1, [sp, #4]
   d634e:	b158      	cbz	r0, d6368 <_Z16_fetch_usbserialv+0x3c>
   d6350:	aa03      	add	r2, sp, #12
   d6352:	4808      	ldr	r0, [pc, #32]	; (d6374 <_Z16_fetch_usbserialv+0x48>)
   d6354:	f7ff ffca 	bl	d62ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6358:	4620      	mov	r0, r4
   d635a:	f7fd feb0 	bl	d40be <__cxa_guard_release>
   d635e:	4a06      	ldr	r2, [pc, #24]	; (d6378 <_Z16_fetch_usbserialv+0x4c>)
   d6360:	4906      	ldr	r1, [pc, #24]	; (d637c <_Z16_fetch_usbserialv+0x50>)
   d6362:	4804      	ldr	r0, [pc, #16]	; (d6374 <_Z16_fetch_usbserialv+0x48>)
   d6364:	f000 f9d4 	bl	d6710 <__aeabi_atexit>
	return _usbserial;
}
   d6368:	4802      	ldr	r0, [pc, #8]	; (d6374 <_Z16_fetch_usbserialv+0x48>)
   d636a:	b008      	add	sp, #32
   d636c:	bd10      	pop	{r4, pc}
   d636e:	bf00      	nop
   d6370:	2003e7ac 	.word	0x2003e7ac
   d6374:	2003e7b0 	.word	0x2003e7b0
   d6378:	2003e5bc 	.word	0x2003e5bc
   d637c:	000d6275 	.word	0x000d6275

000d6380 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6380:	2200      	movs	r2, #0
   d6382:	6840      	ldr	r0, [r0, #4]
   d6384:	4611      	mov	r1, r2
   d6386:	f7fe bfdd 	b.w	d5344 <network_ready>

000d638a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d638a:	2200      	movs	r2, #0
   d638c:	6840      	ldr	r0, [r0, #4]
   d638e:	4611      	mov	r1, r2
   d6390:	f7fe bff8 	b.w	d5384 <network_listening>

000d6394 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6394:	2200      	movs	r2, #0
   d6396:	6840      	ldr	r0, [r0, #4]
   d6398:	4611      	mov	r1, r2
   d639a:	f7ff b803 	b.w	d53a4 <network_get_listen_timeout>

000d639e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d639e:	6840      	ldr	r0, [r0, #4]
   d63a0:	2200      	movs	r2, #0
   d63a2:	f7fe bff7 	b.w	d5394 <network_set_listen_timeout>

000d63a6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d63a6:	6840      	ldr	r0, [r0, #4]
   d63a8:	2200      	movs	r2, #0
   d63aa:	f081 0101 	eor.w	r1, r1, #1
   d63ae:	f7fe bfe1 	b.w	d5374 <network_listen>

000d63b2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d63b2:	2300      	movs	r3, #0
   d63b4:	6840      	ldr	r0, [r0, #4]
   d63b6:	461a      	mov	r2, r3
   d63b8:	4619      	mov	r1, r3
   d63ba:	f7fe bfd3 	b.w	d5364 <network_off>

000d63be <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d63be:	2300      	movs	r3, #0
   d63c0:	6840      	ldr	r0, [r0, #4]
   d63c2:	461a      	mov	r2, r3
   d63c4:	4619      	mov	r1, r3
   d63c6:	f7fe bfc5 	b.w	d5354 <network_on>

000d63ca <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d63ca:	2200      	movs	r2, #0
   d63cc:	6840      	ldr	r0, [r0, #4]
   d63ce:	4611      	mov	r1, r2
   d63d0:	f7fe bfa8 	b.w	d5324 <network_connecting>

000d63d4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d63d4:	6840      	ldr	r0, [r0, #4]
   d63d6:	2200      	movs	r2, #0
   d63d8:	2102      	movs	r1, #2
   d63da:	f7fe bfab 	b.w	d5334 <network_disconnect>

000d63de <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d63de:	2300      	movs	r3, #0
   d63e0:	6840      	ldr	r0, [r0, #4]
   d63e2:	461a      	mov	r2, r3
   d63e4:	f7fe bf96 	b.w	d5314 <network_connect>

000d63e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d63e8:	4b02      	ldr	r3, [pc, #8]	; (d63f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d63ea:	2204      	movs	r2, #4
   d63ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d63ee:	4a02      	ldr	r2, [pc, #8]	; (d63f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d63f0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d63f2:	4770      	bx	lr
   d63f4:	2003e7c4 	.word	0x2003e7c4
   d63f8:	000d7254 	.word	0x000d7254

000d63fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d63fc:	4b01      	ldr	r3, [pc, #4]	; (d6404 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d63fe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6400:	4770      	bx	lr
   d6402:	bf00      	nop
   d6404:	2003e558 	.word	0x2003e558

000d6408 <serialEventRun>:
{
   d6408:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d640a:	4b0b      	ldr	r3, [pc, #44]	; (d6438 <serialEventRun+0x30>)
   d640c:	b143      	cbz	r3, d6420 <serialEventRun+0x18>
   d640e:	f7ff ff8d 	bl	d632c <_Z16_fetch_usbserialv>
   d6412:	6803      	ldr	r3, [r0, #0]
   d6414:	691b      	ldr	r3, [r3, #16]
   d6416:	4798      	blx	r3
   d6418:	2800      	cmp	r0, #0
   d641a:	dd01      	ble.n	d6420 <serialEventRun+0x18>
        serialEvent();
   d641c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6420:	4b06      	ldr	r3, [pc, #24]	; (d643c <serialEventRun+0x34>)
   d6422:	b143      	cbz	r3, d6436 <serialEventRun+0x2e>
   d6424:	f7ff fefa 	bl	d621c <_Z22__fetch_global_Serial1v>
   d6428:	6803      	ldr	r3, [r0, #0]
   d642a:	691b      	ldr	r3, [r3, #16]
   d642c:	4798      	blx	r3
   d642e:	2800      	cmp	r0, #0
   d6430:	dd01      	ble.n	d6436 <serialEventRun+0x2e>
        serialEvent1();
   d6432:	f3af 8000 	nop.w
}
   d6436:	bd08      	pop	{r3, pc}
	...

000d6440 <_post_loop>:
{
   d6440:	b508      	push	{r3, lr}
	serialEventRun();
   d6442:	f7ff ffe1 	bl	d6408 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6446:	f7fe fd81 	bl	d4f4c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d644a:	4b01      	ldr	r3, [pc, #4]	; (d6450 <_post_loop+0x10>)
   d644c:	6018      	str	r0, [r3, #0]
}
   d644e:	bd08      	pop	{r3, pc}
   d6450:	2003e7d4 	.word	0x2003e7d4

000d6454 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6454:	4802      	ldr	r0, [pc, #8]	; (d6460 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6456:	4a03      	ldr	r2, [pc, #12]	; (d6464 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6458:	4903      	ldr	r1, [pc, #12]	; (d6468 <_Z33system_initialize_user_backup_ramv+0x14>)
   d645a:	1a12      	subs	r2, r2, r0
   d645c:	f000 ba8a 	b.w	d6974 <memcpy>
   d6460:	2003f400 	.word	0x2003f400
   d6464:	2003f404 	.word	0x2003f404
   d6468:	000d74b0 	.word	0x000d74b0

000d646c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d646c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d646e:	2300      	movs	r3, #0
   d6470:	9300      	str	r3, [sp, #0]
   d6472:	461a      	mov	r2, r3
   d6474:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6478:	f7fe ff32 	bl	d52e0 <system_ctrl_set_result>
}
   d647c:	b003      	add	sp, #12
   d647e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6484 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6484:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6486:	8843      	ldrh	r3, [r0, #2]
   d6488:	2b0a      	cmp	r3, #10
   d648a:	d008      	beq.n	d649e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d648c:	2b50      	cmp	r3, #80	; 0x50
   d648e:	d10b      	bne.n	d64a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6490:	4b09      	ldr	r3, [pc, #36]	; (d64b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6492:	681b      	ldr	r3, [r3, #0]
   d6494:	b14b      	cbz	r3, d64aa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6496:	b003      	add	sp, #12
   d6498:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d649c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d649e:	f7ff ffe5 	bl	d646c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d64a2:	b003      	add	sp, #12
   d64a4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d64a8:	2300      	movs	r3, #0
   d64aa:	9300      	str	r3, [sp, #0]
   d64ac:	461a      	mov	r2, r3
   d64ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d64b2:	f7fe ff15 	bl	d52e0 <system_ctrl_set_result>
}
   d64b6:	e7f4      	b.n	d64a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d64b8:	2003e7d0 	.word	0x2003e7d0

000d64bc <module_user_init_hook>:
{
   d64bc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d64be:	4c12      	ldr	r4, [pc, #72]	; (d6508 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d64c0:	4812      	ldr	r0, [pc, #72]	; (d650c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d64c2:	4d13      	ldr	r5, [pc, #76]	; (d6510 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d64c4:	2100      	movs	r1, #0
   d64c6:	f7fe ffad 	bl	d5424 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d64ca:	6823      	ldr	r3, [r4, #0]
   d64cc:	42ab      	cmp	r3, r5
   d64ce:	4b11      	ldr	r3, [pc, #68]	; (d6514 <module_user_init_hook+0x58>)
   d64d0:	bf0c      	ite	eq
   d64d2:	2201      	moveq	r2, #1
   d64d4:	2200      	movne	r2, #0
   d64d6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d64d8:	d002      	beq.n	d64e0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d64da:	f7ff ffbb 	bl	d6454 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d64de:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d64e0:	f7fe fd24 	bl	d4f2c <HAL_RNG_GetRandomNumber>
   d64e4:	4604      	mov	r4, r0
    srand(seed);
   d64e6:	f000 fa5b 	bl	d69a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d64ea:	4b0b      	ldr	r3, [pc, #44]	; (d6518 <module_user_init_hook+0x5c>)
   d64ec:	b113      	cbz	r3, d64f4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d64ee:	4620      	mov	r0, r4
   d64f0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d64f4:	2100      	movs	r1, #0
   d64f6:	4808      	ldr	r0, [pc, #32]	; (d6518 <module_user_init_hook+0x5c>)
   d64f8:	f7fe ff04 	bl	d5304 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d64fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6500:	4806      	ldr	r0, [pc, #24]	; (d651c <module_user_init_hook+0x60>)
   d6502:	2100      	movs	r1, #0
   d6504:	f7fe bee2 	b.w	d52cc <system_ctrl_set_app_request_handler>
   d6508:	2003f400 	.word	0x2003f400
   d650c:	000d63fd 	.word	0x000d63fd
   d6510:	9a271c1e 	.word	0x9a271c1e
   d6514:	2003e7cc 	.word	0x2003e7cc
   d6518:	00000000 	.word	0x00000000
   d651c:	000d6485 	.word	0x000d6485

000d6520 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6520:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6522:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6524:	d902      	bls.n	d652c <pinAvailable+0xc>
    return false;
   d6526:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6528:	b002      	add	sp, #8
   d652a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d652c:	f1a0 030b 	sub.w	r3, r0, #11
   d6530:	2b02      	cmp	r3, #2
   d6532:	d81a      	bhi.n	d656a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6534:	4c17      	ldr	r4, [pc, #92]	; (d6594 <pinAvailable+0x74>)
   d6536:	7821      	ldrb	r1, [r4, #0]
   d6538:	f3bf 8f5b 	dmb	ish
   d653c:	f011 0101 	ands.w	r1, r1, #1
   d6540:	d10b      	bne.n	d655a <pinAvailable+0x3a>
   d6542:	4620      	mov	r0, r4
   d6544:	9101      	str	r1, [sp, #4]
   d6546:	f7fd fdb5 	bl	d40b4 <__cxa_guard_acquire>
   d654a:	9901      	ldr	r1, [sp, #4]
   d654c:	b128      	cbz	r0, d655a <pinAvailable+0x3a>
   d654e:	4812      	ldr	r0, [pc, #72]	; (d6598 <pinAvailable+0x78>)
   d6550:	f7ff fa18 	bl	d5984 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6554:	4620      	mov	r0, r4
   d6556:	f7fd fdb2 	bl	d40be <__cxa_guard_release>
   d655a:	4b0f      	ldr	r3, [pc, #60]	; (d6598 <pinAvailable+0x78>)
   d655c:	7818      	ldrb	r0, [r3, #0]
   d655e:	f7fe fded 	bl	d513c <hal_spi_is_enabled>
   d6562:	2800      	cmp	r0, #0
   d6564:	d1df      	bne.n	d6526 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6566:	2001      	movs	r0, #1
   d6568:	e7de      	b.n	d6528 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d656a:	2801      	cmp	r0, #1
   d656c:	d809      	bhi.n	d6582 <pinAvailable+0x62>
   d656e:	f000 f8a7 	bl	d66c0 <_Z19__fetch_global_Wirev>
   d6572:	2100      	movs	r1, #0
   d6574:	7c00      	ldrb	r0, [r0, #16]
   d6576:	f7fe fd59 	bl	d502c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d657a:	f080 0001 	eor.w	r0, r0, #1
   d657e:	b2c0      	uxtb	r0, r0
   d6580:	e7d2      	b.n	d6528 <pinAvailable+0x8>
   d6582:	3809      	subs	r0, #9
   d6584:	2801      	cmp	r0, #1
   d6586:	d8ee      	bhi.n	d6566 <pinAvailable+0x46>
   d6588:	f7ff fe48 	bl	d621c <_Z22__fetch_global_Serial1v>
   d658c:	7c00      	ldrb	r0, [r0, #16]
   d658e:	f7fe fe2d 	bl	d51ec <hal_usart_is_enabled>
   d6592:	e7f2      	b.n	d657a <pinAvailable+0x5a>
   d6594:	2003e5c0 	.word	0x2003e5c0
   d6598:	2003e5c4 	.word	0x2003e5c4

000d659c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d659c:	2823      	cmp	r0, #35	; 0x23
{
   d659e:	b538      	push	{r3, r4, r5, lr}
   d65a0:	4604      	mov	r4, r0
   d65a2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d65a4:	d80a      	bhi.n	d65bc <pinMode+0x20>
   d65a6:	29ff      	cmp	r1, #255	; 0xff
   d65a8:	d008      	beq.n	d65bc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d65aa:	f7ff ffb9 	bl	d6520 <pinAvailable>
   d65ae:	b128      	cbz	r0, d65bc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d65b0:	4629      	mov	r1, r5
   d65b2:	4620      	mov	r0, r4
}
   d65b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d65b8:	f7fe bcd8 	b.w	d4f6c <HAL_Pin_Mode>
}
   d65bc:	bd38      	pop	{r3, r4, r5, pc}

000d65be <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d65be:	b538      	push	{r3, r4, r5, lr}
   d65c0:	4604      	mov	r4, r0
   d65c2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d65c4:	f7fe fcda 	bl	d4f7c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d65c8:	28ff      	cmp	r0, #255	; 0xff
   d65ca:	d010      	beq.n	d65ee <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d65cc:	2806      	cmp	r0, #6
   d65ce:	d804      	bhi.n	d65da <digitalWrite+0x1c>
   d65d0:	234d      	movs	r3, #77	; 0x4d
   d65d2:	fa23 f000 	lsr.w	r0, r3, r0
   d65d6:	07c3      	lsls	r3, r0, #31
   d65d8:	d409      	bmi.n	d65ee <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d65da:	4620      	mov	r0, r4
   d65dc:	f7ff ffa0 	bl	d6520 <pinAvailable>
   d65e0:	b128      	cbz	r0, d65ee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d65e2:	4629      	mov	r1, r5
   d65e4:	4620      	mov	r0, r4
}
   d65e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d65ea:	f7fe bccf 	b.w	d4f8c <HAL_GPIO_Write>
}
   d65ee:	bd38      	pop	{r3, r4, r5, pc}

000d65f0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d65f0:	b510      	push	{r4, lr}
   d65f2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d65f4:	f7fe fcc2 	bl	d4f7c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d65f8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d65fa:	b2db      	uxtb	r3, r3
   d65fc:	2b01      	cmp	r3, #1
   d65fe:	d908      	bls.n	d6612 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6600:	4620      	mov	r0, r4
   d6602:	f7ff ff8d 	bl	d6520 <pinAvailable>
   d6606:	b120      	cbz	r0, d6612 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6608:	4620      	mov	r0, r4
}
   d660a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d660e:	f7fe bcc5 	b.w	d4f9c <HAL_GPIO_Read>
}
   d6612:	2000      	movs	r0, #0
   d6614:	bd10      	pop	{r4, pc}

000d6616 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6616:	280d      	cmp	r0, #13
{
   d6618:	b510      	push	{r4, lr}
   d661a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d661c:	bf9c      	itt	ls
   d661e:	340e      	addls	r4, #14
   d6620:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6622:	4620      	mov	r0, r4
   d6624:	f7ff ff7c 	bl	d6520 <pinAvailable>
   d6628:	b150      	cbz	r0, d6640 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d662a:	2103      	movs	r1, #3
   d662c:	4620      	mov	r0, r4
   d662e:	f7fe fc95 	bl	d4f5c <HAL_Validate_Pin_Function>
   d6632:	2803      	cmp	r0, #3
   d6634:	d104      	bne.n	d6640 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d6636:	4620      	mov	r0, r4
}
   d6638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d663c:	f7fe bcbe 	b.w	d4fbc <hal_adc_read>
}
   d6640:	2000      	movs	r0, #0
   d6642:	bd10      	pop	{r4, pc}

000d6644 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d6644:	b538      	push	{r3, r4, r5, lr}
   d6646:	4604      	mov	r4, r0
   d6648:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d664a:	f7ff ff69 	bl	d6520 <pinAvailable>
   d664e:	b1f0      	cbz	r0, d668e <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d6650:	2104      	movs	r1, #4
   d6652:	4620      	mov	r0, r4
   d6654:	f7fe fc82 	bl	d4f5c <HAL_Validate_Pin_Function>
   d6658:	2804      	cmp	r0, #4
   d665a:	d105      	bne.n	d6668 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d665c:	b2a9      	uxth	r1, r5
   d665e:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d6660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d6664:	f7fe bca2 	b.w	d4fac <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d6668:	2102      	movs	r1, #2
   d666a:	4620      	mov	r0, r4
   d666c:	f7fe fc76 	bl	d4f5c <HAL_Validate_Pin_Function>
   d6670:	2802      	cmp	r0, #2
   d6672:	d10c      	bne.n	d668e <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d6674:	4620      	mov	r0, r4
   d6676:	f7fe fc81 	bl	d4f7c <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d667a:	2801      	cmp	r0, #1
   d667c:	d001      	beq.n	d6682 <_Z11analogWritetm+0x3e>
   d667e:	2804      	cmp	r0, #4
   d6680:	d105      	bne.n	d668e <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d6682:	4629      	mov	r1, r5
   d6684:	4620      	mov	r0, r4
}
   d6686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d668a:	f7fe bc9f 	b.w	d4fcc <hal_pwm_write_ext>
}
   d668e:	bd38      	pop	{r3, r4, r5, pc}

000d6690 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6690:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6692:	2300      	movs	r3, #0
   d6694:	2520      	movs	r5, #32
   d6696:	8043      	strh	r3, [r0, #2]
   d6698:	2314      	movs	r3, #20
{
   d669a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d669c:	8003      	strh	r3, [r0, #0]
   d669e:	6085      	str	r5, [r0, #8]
   d66a0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d66a2:	4906      	ldr	r1, [pc, #24]	; (d66bc <_Z17acquireWireBufferv+0x2c>)
   d66a4:	4628      	mov	r0, r5
   d66a6:	f000 f83a 	bl	d671e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d66aa:	4904      	ldr	r1, [pc, #16]	; (d66bc <_Z17acquireWireBufferv+0x2c>)
	};
   d66ac:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d66ae:	4628      	mov	r0, r5
   d66b0:	f000 f835 	bl	d671e <_ZnajRKSt9nothrow_t>
	};
   d66b4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d66b6:	4620      	mov	r0, r4
   d66b8:	bd38      	pop	{r3, r4, r5, pc}
   d66ba:	bf00      	nop
   d66bc:	000d7288 	.word	0x000d7288

000d66c0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d66c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d66c2:	4d0f      	ldr	r5, [pc, #60]	; (d6700 <_Z19__fetch_global_Wirev+0x40>)
   d66c4:	7829      	ldrb	r1, [r5, #0]
   d66c6:	f3bf 8f5b 	dmb	ish
   d66ca:	f011 0401 	ands.w	r4, r1, #1
{
   d66ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d66d0:	d113      	bne.n	d66fa <_Z19__fetch_global_Wirev+0x3a>
   d66d2:	4628      	mov	r0, r5
   d66d4:	f7fd fcee 	bl	d40b4 <__cxa_guard_acquire>
   d66d8:	b178      	cbz	r0, d66fa <_Z19__fetch_global_Wirev+0x3a>
   d66da:	a801      	add	r0, sp, #4
   d66dc:	f7ff ffd8 	bl	d6690 <_Z17acquireWireBufferv>
   d66e0:	aa01      	add	r2, sp, #4
   d66e2:	4621      	mov	r1, r4
   d66e4:	4807      	ldr	r0, [pc, #28]	; (d6704 <_Z19__fetch_global_Wirev+0x44>)
   d66e6:	f7fe ff37 	bl	d5558 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d66ea:	4628      	mov	r0, r5
   d66ec:	f7fd fce7 	bl	d40be <__cxa_guard_release>
   d66f0:	4a05      	ldr	r2, [pc, #20]	; (d6708 <_Z19__fetch_global_Wirev+0x48>)
   d66f2:	4906      	ldr	r1, [pc, #24]	; (d670c <_Z19__fetch_global_Wirev+0x4c>)
   d66f4:	4803      	ldr	r0, [pc, #12]	; (d6704 <_Z19__fetch_global_Wirev+0x44>)
   d66f6:	f000 f80b 	bl	d6710 <__aeabi_atexit>
	return wire;
}
   d66fa:	4802      	ldr	r0, [pc, #8]	; (d6704 <_Z19__fetch_global_Wirev+0x44>)
   d66fc:	b007      	add	sp, #28
   d66fe:	bd30      	pop	{r4, r5, pc}
   d6700:	2003e7d8 	.word	0x2003e7d8
   d6704:	2003e7dc 	.word	0x2003e7dc
   d6708:	2003e5bc 	.word	0x2003e5bc
   d670c:	000d5501 	.word	0x000d5501

000d6710 <__aeabi_atexit>:
   d6710:	460b      	mov	r3, r1
   d6712:	4601      	mov	r1, r0
   d6714:	4618      	mov	r0, r3
   d6716:	f000 b91f 	b.w	d6958 <__cxa_atexit>

000d671a <_ZdlPvj>:
   d671a:	f7fd bcbe 	b.w	d409a <_ZdlPv>

000d671e <_ZnajRKSt9nothrow_t>:
   d671e:	f7fd bcba 	b.w	d4096 <_Znaj>
	...

000d6724 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d6724:	4901      	ldr	r1, [pc, #4]	; (d672c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d6726:	f000 b8f9 	b.w	d691c <_ZNKSt9type_infoeqERKS_>
   d672a:	bf00      	nop
   d672c:	000d72a4 	.word	0x000d72a4

000d6730 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d6730:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6732:	2400      	movs	r4, #0
   d6734:	2310      	movs	r3, #16
   d6736:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d673a:	6803      	ldr	r3, [r0, #0]
   d673c:	9400      	str	r4, [sp, #0]
   d673e:	699e      	ldr	r6, [r3, #24]
   d6740:	f88d 4004 	strb.w	r4, [sp, #4]
   d6744:	4615      	mov	r5, r2
   d6746:	466b      	mov	r3, sp
   d6748:	6812      	ldr	r2, [r2, #0]
   d674a:	47b0      	blx	r6
   d674c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6750:	f003 0306 	and.w	r3, r3, #6
   d6754:	2b06      	cmp	r3, #6
   d6756:	bf03      	ittte	eq
   d6758:	9b00      	ldreq	r3, [sp, #0]
   d675a:	602b      	streq	r3, [r5, #0]
   d675c:	2001      	moveq	r0, #1
   d675e:	4620      	movne	r0, r4
   d6760:	b004      	add	sp, #16
   d6762:	bd70      	pop	{r4, r5, r6, pc}

000d6764 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d6764:	9800      	ldr	r0, [sp, #0]
   d6766:	4290      	cmp	r0, r2
   d6768:	bf14      	ite	ne
   d676a:	2001      	movne	r0, #1
   d676c:	2006      	moveq	r0, #6
   d676e:	4770      	bx	lr

000d6770 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d6770:	b510      	push	{r4, lr}
   d6772:	4b03      	ldr	r3, [pc, #12]	; (d6780 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d6774:	6003      	str	r3, [r0, #0]
   d6776:	4604      	mov	r4, r0
   d6778:	f000 f8cd 	bl	d6916 <_ZNSt9type_infoD1Ev>
   d677c:	4620      	mov	r0, r4
   d677e:	bd10      	pop	{r4, pc}
   d6780:	000d72e4 	.word	0x000d72e4

000d6784 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d6784:	b510      	push	{r4, lr}
   d6786:	4604      	mov	r4, r0
   d6788:	f7ff fff2 	bl	d6770 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d678c:	4620      	mov	r0, r4
   d678e:	2108      	movs	r1, #8
   d6790:	f7ff ffc3 	bl	d671a <_ZdlPvj>
   d6794:	4620      	mov	r0, r4
   d6796:	bd10      	pop	{r4, pc}

000d6798 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d6798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d679c:	461f      	mov	r7, r3
   d679e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d67a2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d67a6:	4598      	cmp	r8, r3
   d67a8:	4606      	mov	r6, r0
   d67aa:	4615      	mov	r5, r2
   d67ac:	d107      	bne.n	d67be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d67ae:	9907      	ldr	r1, [sp, #28]
   d67b0:	f000 f8b4 	bl	d691c <_ZNKSt9type_infoeqERKS_>
   d67b4:	b118      	cbz	r0, d67be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d67b6:	7165      	strb	r5, [r4, #5]
   d67b8:	2000      	movs	r0, #0
   d67ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d67be:	4639      	mov	r1, r7
   d67c0:	4630      	mov	r0, r6
   d67c2:	f000 f8ab 	bl	d691c <_ZNKSt9type_infoeqERKS_>
   d67c6:	2800      	cmp	r0, #0
   d67c8:	d0f6      	beq.n	d67b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d67ca:	2301      	movs	r3, #1
   d67cc:	f8c4 8000 	str.w	r8, [r4]
   d67d0:	7125      	strb	r5, [r4, #4]
   d67d2:	71a3      	strb	r3, [r4, #6]
   d67d4:	e7f0      	b.n	d67b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d67d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d67d6:	b538      	push	{r3, r4, r5, lr}
   d67d8:	4615      	mov	r5, r2
   d67da:	461c      	mov	r4, r3
   d67dc:	f000 f89e 	bl	d691c <_ZNKSt9type_infoeqERKS_>
   d67e0:	b120      	cbz	r0, d67ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d67e2:	2308      	movs	r3, #8
   d67e4:	60e3      	str	r3, [r4, #12]
   d67e6:	2306      	movs	r3, #6
   d67e8:	6025      	str	r5, [r4, #0]
   d67ea:	7123      	strb	r3, [r4, #4]
   d67ec:	bd38      	pop	{r3, r4, r5, pc}

000d67ee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d67ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d67f0:	4605      	mov	r5, r0
   d67f2:	460c      	mov	r4, r1
   d67f4:	9201      	str	r2, [sp, #4]
   d67f6:	461e      	mov	r6, r3
   d67f8:	f000 f890 	bl	d691c <_ZNKSt9type_infoeqERKS_>
   d67fc:	b950      	cbnz	r0, d6814 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d67fe:	2e03      	cmp	r6, #3
   d6800:	d808      	bhi.n	d6814 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6802:	6823      	ldr	r3, [r4, #0]
   d6804:	9a01      	ldr	r2, [sp, #4]
   d6806:	695b      	ldr	r3, [r3, #20]
   d6808:	4629      	mov	r1, r5
   d680a:	4620      	mov	r0, r4
   d680c:	b002      	add	sp, #8
   d680e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6812:	4718      	bx	r3
   d6814:	b002      	add	sp, #8
   d6816:	bd70      	pop	{r4, r5, r6, pc}

000d6818 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d6818:	b510      	push	{r4, lr}
   d681a:	4b03      	ldr	r3, [pc, #12]	; (d6828 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d681c:	6003      	str	r3, [r0, #0]
   d681e:	4604      	mov	r4, r0
   d6820:	f7ff ffa6 	bl	d6770 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6824:	4620      	mov	r0, r4
   d6826:	bd10      	pop	{r4, pc}
   d6828:	000d7344 	.word	0x000d7344

000d682c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d682c:	b510      	push	{r4, lr}
   d682e:	4604      	mov	r4, r0
   d6830:	f7ff fff2 	bl	d6818 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d6834:	4620      	mov	r0, r4
   d6836:	210c      	movs	r1, #12
   d6838:	f7ff ff6f 	bl	d671a <_ZdlPvj>
   d683c:	4620      	mov	r0, r4
   d683e:	bd10      	pop	{r4, pc}

000d6840 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d6840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6842:	9f08      	ldr	r7, [sp, #32]
   d6844:	4297      	cmp	r7, r2
   d6846:	4605      	mov	r5, r0
   d6848:	460e      	mov	r6, r1
   d684a:	4614      	mov	r4, r2
   d684c:	d00a      	beq.n	d6864 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d684e:	68a8      	ldr	r0, [r5, #8]
   d6850:	6802      	ldr	r2, [r0, #0]
   d6852:	9708      	str	r7, [sp, #32]
   d6854:	6a15      	ldr	r5, [r2, #32]
   d6856:	4631      	mov	r1, r6
   d6858:	4622      	mov	r2, r4
   d685a:	46ac      	mov	ip, r5
   d685c:	b003      	add	sp, #12
   d685e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6862:	4760      	bx	ip
   d6864:	4619      	mov	r1, r3
   d6866:	9301      	str	r3, [sp, #4]
   d6868:	f000 f858 	bl	d691c <_ZNKSt9type_infoeqERKS_>
   d686c:	9b01      	ldr	r3, [sp, #4]
   d686e:	2800      	cmp	r0, #0
   d6870:	d0ed      	beq.n	d684e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d6872:	2006      	movs	r0, #6
   d6874:	b003      	add	sp, #12
   d6876:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6878 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d6878:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d687c:	460d      	mov	r5, r1
   d687e:	4619      	mov	r1, r3
   d6880:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d6884:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d6888:	4681      	mov	r9, r0
   d688a:	4617      	mov	r7, r2
   d688c:	4698      	mov	r8, r3
   d688e:	f000 f845 	bl	d691c <_ZNKSt9type_infoeqERKS_>
   d6892:	b190      	cbz	r0, d68ba <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d6894:	2d00      	cmp	r5, #0
   d6896:	6034      	str	r4, [r6, #0]
   d6898:	7137      	strb	r7, [r6, #4]
   d689a:	db09      	blt.n	d68b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d689c:	1961      	adds	r1, r4, r5
   d689e:	458a      	cmp	sl, r1
   d68a0:	bf0c      	ite	eq
   d68a2:	2106      	moveq	r1, #6
   d68a4:	2101      	movne	r1, #1
   d68a6:	71b1      	strb	r1, [r6, #6]
   d68a8:	2000      	movs	r0, #0
   d68aa:	b001      	add	sp, #4
   d68ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d68b0:	3502      	adds	r5, #2
   d68b2:	d1f9      	bne.n	d68a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d68b4:	2301      	movs	r3, #1
   d68b6:	71b3      	strb	r3, [r6, #6]
   d68b8:	e7f6      	b.n	d68a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d68ba:	4554      	cmp	r4, sl
   d68bc:	d106      	bne.n	d68cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d68be:	4659      	mov	r1, fp
   d68c0:	4648      	mov	r0, r9
   d68c2:	f000 f82b 	bl	d691c <_ZNKSt9type_infoeqERKS_>
   d68c6:	b108      	cbz	r0, d68cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d68c8:	7177      	strb	r7, [r6, #5]
   d68ca:	e7ed      	b.n	d68a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d68cc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d68d0:	6803      	ldr	r3, [r0, #0]
   d68d2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d68d6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d68da:	69dc      	ldr	r4, [r3, #28]
   d68dc:	463a      	mov	r2, r7
   d68de:	4643      	mov	r3, r8
   d68e0:	4629      	mov	r1, r5
   d68e2:	46a4      	mov	ip, r4
   d68e4:	b001      	add	sp, #4
   d68e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d68ea:	4760      	bx	ip

000d68ec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d68ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d68f0:	4607      	mov	r7, r0
   d68f2:	460c      	mov	r4, r1
   d68f4:	4615      	mov	r5, r2
   d68f6:	461e      	mov	r6, r3
   d68f8:	f7ff ff6d 	bl	d67d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d68fc:	b948      	cbnz	r0, d6912 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d68fe:	68b8      	ldr	r0, [r7, #8]
   d6900:	6803      	ldr	r3, [r0, #0]
   d6902:	699f      	ldr	r7, [r3, #24]
   d6904:	462a      	mov	r2, r5
   d6906:	4633      	mov	r3, r6
   d6908:	4621      	mov	r1, r4
   d690a:	46bc      	mov	ip, r7
   d690c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6910:	4760      	bx	ip
   d6912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6916 <_ZNSt9type_infoD1Ev>:
   d6916:	4770      	bx	lr

000d6918 <_ZNKSt9type_info14__is_pointer_pEv>:
   d6918:	2000      	movs	r0, #0
   d691a:	4770      	bx	lr

000d691c <_ZNKSt9type_infoeqERKS_>:
   d691c:	4281      	cmp	r1, r0
   d691e:	b508      	push	{r3, lr}
   d6920:	d00e      	beq.n	d6940 <_ZNKSt9type_infoeqERKS_+0x24>
   d6922:	6840      	ldr	r0, [r0, #4]
   d6924:	7803      	ldrb	r3, [r0, #0]
   d6926:	2b2a      	cmp	r3, #42	; 0x2a
   d6928:	d00c      	beq.n	d6944 <_ZNKSt9type_infoeqERKS_+0x28>
   d692a:	6849      	ldr	r1, [r1, #4]
   d692c:	780b      	ldrb	r3, [r1, #0]
   d692e:	2b2a      	cmp	r3, #42	; 0x2a
   d6930:	bf08      	it	eq
   d6932:	3101      	addeq	r1, #1
   d6934:	f000 f858 	bl	d69e8 <strcmp>
   d6938:	fab0 f080 	clz	r0, r0
   d693c:	0940      	lsrs	r0, r0, #5
   d693e:	bd08      	pop	{r3, pc}
   d6940:	2001      	movs	r0, #1
   d6942:	e7fc      	b.n	d693e <_ZNKSt9type_infoeqERKS_+0x22>
   d6944:	2000      	movs	r0, #0
   d6946:	e7fa      	b.n	d693e <_ZNKSt9type_infoeqERKS_+0x22>

000d6948 <atoi>:
   d6948:	220a      	movs	r2, #10
   d694a:	2100      	movs	r1, #0
   d694c:	f000 b8ec 	b.w	d6b28 <strtol>

000d6950 <atol>:
   d6950:	220a      	movs	r2, #10
   d6952:	2100      	movs	r1, #0
   d6954:	f000 b8e8 	b.w	d6b28 <strtol>

000d6958 <__cxa_atexit>:
   d6958:	b510      	push	{r4, lr}
   d695a:	4c05      	ldr	r4, [pc, #20]	; (d6970 <__cxa_atexit+0x18>)
   d695c:	4613      	mov	r3, r2
   d695e:	b12c      	cbz	r4, d696c <__cxa_atexit+0x14>
   d6960:	460a      	mov	r2, r1
   d6962:	4601      	mov	r1, r0
   d6964:	2002      	movs	r0, #2
   d6966:	f3af 8000 	nop.w
   d696a:	bd10      	pop	{r4, pc}
   d696c:	4620      	mov	r0, r4
   d696e:	e7fc      	b.n	d696a <__cxa_atexit+0x12>
   d6970:	00000000 	.word	0x00000000

000d6974 <memcpy>:
   d6974:	440a      	add	r2, r1
   d6976:	4291      	cmp	r1, r2
   d6978:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d697c:	d100      	bne.n	d6980 <memcpy+0xc>
   d697e:	4770      	bx	lr
   d6980:	b510      	push	{r4, lr}
   d6982:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6986:	f803 4f01 	strb.w	r4, [r3, #1]!
   d698a:	4291      	cmp	r1, r2
   d698c:	d1f9      	bne.n	d6982 <memcpy+0xe>
   d698e:	bd10      	pop	{r4, pc}

000d6990 <memset>:
   d6990:	4402      	add	r2, r0
   d6992:	4603      	mov	r3, r0
   d6994:	4293      	cmp	r3, r2
   d6996:	d100      	bne.n	d699a <memset+0xa>
   d6998:	4770      	bx	lr
   d699a:	f803 1b01 	strb.w	r1, [r3], #1
   d699e:	e7f9      	b.n	d6994 <memset+0x4>

000d69a0 <srand>:
   d69a0:	b538      	push	{r3, r4, r5, lr}
   d69a2:	4b0d      	ldr	r3, [pc, #52]	; (d69d8 <srand+0x38>)
   d69a4:	681d      	ldr	r5, [r3, #0]
   d69a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d69a8:	4604      	mov	r4, r0
   d69aa:	b97b      	cbnz	r3, d69cc <srand+0x2c>
   d69ac:	2018      	movs	r0, #24
   d69ae:	f7fe fd11 	bl	d53d4 <malloc>
   d69b2:	4a0a      	ldr	r2, [pc, #40]	; (d69dc <srand+0x3c>)
   d69b4:	4b0a      	ldr	r3, [pc, #40]	; (d69e0 <srand+0x40>)
   d69b6:	63a8      	str	r0, [r5, #56]	; 0x38
   d69b8:	e9c0 2300 	strd	r2, r3, [r0]
   d69bc:	4b09      	ldr	r3, [pc, #36]	; (d69e4 <srand+0x44>)
   d69be:	6083      	str	r3, [r0, #8]
   d69c0:	230b      	movs	r3, #11
   d69c2:	8183      	strh	r3, [r0, #12]
   d69c4:	2201      	movs	r2, #1
   d69c6:	2300      	movs	r3, #0
   d69c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d69cc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d69ce:	2200      	movs	r2, #0
   d69d0:	611c      	str	r4, [r3, #16]
   d69d2:	615a      	str	r2, [r3, #20]
   d69d4:	bd38      	pop	{r3, r4, r5, pc}
   d69d6:	bf00      	nop
   d69d8:	2003e558 	.word	0x2003e558
   d69dc:	abcd330e 	.word	0xabcd330e
   d69e0:	e66d1234 	.word	0xe66d1234
   d69e4:	0005deec 	.word	0x0005deec

000d69e8 <strcmp>:
   d69e8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d69ec:	f811 3b01 	ldrb.w	r3, [r1], #1
   d69f0:	2a01      	cmp	r2, #1
   d69f2:	bf28      	it	cs
   d69f4:	429a      	cmpcs	r2, r3
   d69f6:	d0f7      	beq.n	d69e8 <strcmp>
   d69f8:	1ad0      	subs	r0, r2, r3
   d69fa:	4770      	bx	lr

000d69fc <strlen>:
   d69fc:	4603      	mov	r3, r0
   d69fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6a02:	2a00      	cmp	r2, #0
   d6a04:	d1fb      	bne.n	d69fe <strlen+0x2>
   d6a06:	1a18      	subs	r0, r3, r0
   d6a08:	3801      	subs	r0, #1
   d6a0a:	4770      	bx	lr

000d6a0c <strncpy>:
   d6a0c:	b510      	push	{r4, lr}
   d6a0e:	3901      	subs	r1, #1
   d6a10:	4603      	mov	r3, r0
   d6a12:	b132      	cbz	r2, d6a22 <strncpy+0x16>
   d6a14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6a18:	f803 4b01 	strb.w	r4, [r3], #1
   d6a1c:	3a01      	subs	r2, #1
   d6a1e:	2c00      	cmp	r4, #0
   d6a20:	d1f7      	bne.n	d6a12 <strncpy+0x6>
   d6a22:	441a      	add	r2, r3
   d6a24:	2100      	movs	r1, #0
   d6a26:	4293      	cmp	r3, r2
   d6a28:	d100      	bne.n	d6a2c <strncpy+0x20>
   d6a2a:	bd10      	pop	{r4, pc}
   d6a2c:	f803 1b01 	strb.w	r1, [r3], #1
   d6a30:	e7f9      	b.n	d6a26 <strncpy+0x1a>
	...

000d6a34 <_strtol_l.isra.0>:
   d6a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6a38:	4e3a      	ldr	r6, [pc, #232]	; (d6b24 <_strtol_l.isra.0+0xf0>)
   d6a3a:	4686      	mov	lr, r0
   d6a3c:	468c      	mov	ip, r1
   d6a3e:	4660      	mov	r0, ip
   d6a40:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6a44:	5da5      	ldrb	r5, [r4, r6]
   d6a46:	f015 0508 	ands.w	r5, r5, #8
   d6a4a:	d1f8      	bne.n	d6a3e <_strtol_l.isra.0+0xa>
   d6a4c:	2c2d      	cmp	r4, #45	; 0x2d
   d6a4e:	d133      	bne.n	d6ab8 <_strtol_l.isra.0+0x84>
   d6a50:	f89c 4000 	ldrb.w	r4, [ip]
   d6a54:	f04f 0801 	mov.w	r8, #1
   d6a58:	f100 0c02 	add.w	ip, r0, #2
   d6a5c:	2b00      	cmp	r3, #0
   d6a5e:	d05c      	beq.n	d6b1a <_strtol_l.isra.0+0xe6>
   d6a60:	2b10      	cmp	r3, #16
   d6a62:	d10c      	bne.n	d6a7e <_strtol_l.isra.0+0x4a>
   d6a64:	2c30      	cmp	r4, #48	; 0x30
   d6a66:	d10a      	bne.n	d6a7e <_strtol_l.isra.0+0x4a>
   d6a68:	f89c 0000 	ldrb.w	r0, [ip]
   d6a6c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6a70:	2858      	cmp	r0, #88	; 0x58
   d6a72:	d14d      	bne.n	d6b10 <_strtol_l.isra.0+0xdc>
   d6a74:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d6a78:	2310      	movs	r3, #16
   d6a7a:	f10c 0c02 	add.w	ip, ip, #2
   d6a7e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d6a82:	3f01      	subs	r7, #1
   d6a84:	2600      	movs	r6, #0
   d6a86:	fbb7 f9f3 	udiv	r9, r7, r3
   d6a8a:	4630      	mov	r0, r6
   d6a8c:	fb03 7a19 	mls	sl, r3, r9, r7
   d6a90:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d6a94:	2d09      	cmp	r5, #9
   d6a96:	d818      	bhi.n	d6aca <_strtol_l.isra.0+0x96>
   d6a98:	462c      	mov	r4, r5
   d6a9a:	42a3      	cmp	r3, r4
   d6a9c:	dd24      	ble.n	d6ae8 <_strtol_l.isra.0+0xb4>
   d6a9e:	1c75      	adds	r5, r6, #1
   d6aa0:	d007      	beq.n	d6ab2 <_strtol_l.isra.0+0x7e>
   d6aa2:	4581      	cmp	r9, r0
   d6aa4:	d31d      	bcc.n	d6ae2 <_strtol_l.isra.0+0xae>
   d6aa6:	d101      	bne.n	d6aac <_strtol_l.isra.0+0x78>
   d6aa8:	45a2      	cmp	sl, r4
   d6aaa:	db1a      	blt.n	d6ae2 <_strtol_l.isra.0+0xae>
   d6aac:	fb00 4003 	mla	r0, r0, r3, r4
   d6ab0:	2601      	movs	r6, #1
   d6ab2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6ab6:	e7eb      	b.n	d6a90 <_strtol_l.isra.0+0x5c>
   d6ab8:	2c2b      	cmp	r4, #43	; 0x2b
   d6aba:	bf08      	it	eq
   d6abc:	f89c 4000 	ldrbeq.w	r4, [ip]
   d6ac0:	46a8      	mov	r8, r5
   d6ac2:	bf08      	it	eq
   d6ac4:	f100 0c02 	addeq.w	ip, r0, #2
   d6ac8:	e7c8      	b.n	d6a5c <_strtol_l.isra.0+0x28>
   d6aca:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d6ace:	2d19      	cmp	r5, #25
   d6ad0:	d801      	bhi.n	d6ad6 <_strtol_l.isra.0+0xa2>
   d6ad2:	3c37      	subs	r4, #55	; 0x37
   d6ad4:	e7e1      	b.n	d6a9a <_strtol_l.isra.0+0x66>
   d6ad6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d6ada:	2d19      	cmp	r5, #25
   d6adc:	d804      	bhi.n	d6ae8 <_strtol_l.isra.0+0xb4>
   d6ade:	3c57      	subs	r4, #87	; 0x57
   d6ae0:	e7db      	b.n	d6a9a <_strtol_l.isra.0+0x66>
   d6ae2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d6ae6:	e7e4      	b.n	d6ab2 <_strtol_l.isra.0+0x7e>
   d6ae8:	1c73      	adds	r3, r6, #1
   d6aea:	d106      	bne.n	d6afa <_strtol_l.isra.0+0xc6>
   d6aec:	2322      	movs	r3, #34	; 0x22
   d6aee:	f8ce 3000 	str.w	r3, [lr]
   d6af2:	4638      	mov	r0, r7
   d6af4:	b942      	cbnz	r2, d6b08 <_strtol_l.isra.0+0xd4>
   d6af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6afa:	f1b8 0f00 	cmp.w	r8, #0
   d6afe:	d000      	beq.n	d6b02 <_strtol_l.isra.0+0xce>
   d6b00:	4240      	negs	r0, r0
   d6b02:	2a00      	cmp	r2, #0
   d6b04:	d0f7      	beq.n	d6af6 <_strtol_l.isra.0+0xc2>
   d6b06:	b10e      	cbz	r6, d6b0c <_strtol_l.isra.0+0xd8>
   d6b08:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d6b0c:	6011      	str	r1, [r2, #0]
   d6b0e:	e7f2      	b.n	d6af6 <_strtol_l.isra.0+0xc2>
   d6b10:	2430      	movs	r4, #48	; 0x30
   d6b12:	2b00      	cmp	r3, #0
   d6b14:	d1b3      	bne.n	d6a7e <_strtol_l.isra.0+0x4a>
   d6b16:	2308      	movs	r3, #8
   d6b18:	e7b1      	b.n	d6a7e <_strtol_l.isra.0+0x4a>
   d6b1a:	2c30      	cmp	r4, #48	; 0x30
   d6b1c:	d0a4      	beq.n	d6a68 <_strtol_l.isra.0+0x34>
   d6b1e:	230a      	movs	r3, #10
   d6b20:	e7ad      	b.n	d6a7e <_strtol_l.isra.0+0x4a>
   d6b22:	bf00      	nop
   d6b24:	000d737e 	.word	0x000d737e

000d6b28 <strtol>:
   d6b28:	4613      	mov	r3, r2
   d6b2a:	460a      	mov	r2, r1
   d6b2c:	4601      	mov	r1, r0
   d6b2e:	4802      	ldr	r0, [pc, #8]	; (d6b38 <strtol+0x10>)
   d6b30:	6800      	ldr	r0, [r0, #0]
   d6b32:	f7ff bf7f 	b.w	d6a34 <_strtol_l.isra.0>
   d6b36:	bf00      	nop
   d6b38:	2003e558 	.word	0x2003e558

000d6b3c <dynalib_user>:
   d6b3c:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d6b4c:	00000000 61666564 20746c75 42534d00     ....default .MSB
   d6b5c:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   d6b6c:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   d6b7c:	69747465 2073676e 75257325 20732520     ettings %s%u %s 
   d6b8c:	45444f4d 003e7525 25006925 6900696c     MODE%u>.%i.%li.i
   d6b9c:	756f006e 77700074 7764006d 00776100     n.out.pwm.dw.aw.
   d6bac:	2d794f34 74684d70 70724744 697a5f75     4Oy-pMhtDGrpu_zi
   d6bbc:	65636f31 69614267 79743679 61657938     1ocegBaiy6ty8yea
   d6bcc:	00777600                                .vw.

000d6bd0 <_ZTVN8particle11SPISettingsE>:
	...
   d6bd8:	000d4155 000d40c5 000d40c7              UA...@...@..

000d6be4 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d6be4:	6b6e6c62 00666e69 00726576 2e302e31     blnkinf.ver.1.0.
   d6bf4:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   d6c04:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d6c14:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d6c24:	32203820 20313230 313a3031 34323a34      8 2021 10:14:24
   d6c34:	64000000 63697665 6f6e2065 6f662074     ...device not fo
   d6c44:	00646e75                                und.

000d6c48 <_ZTV6LIS3DH>:
	...
   d6c58:	000d4d79 000d40a1 000d40a1              yM...@...@..

000d6c64 <_ZTV9LIS3DHSPI>:
	...
   d6c6c:	000d4c65 000d4c67 000d4d9b 000d4ca5     eL..gL...M...L..
   d6c7c:	000d4ce7 000d4c75 000d4c8f              .L..uL...L..

000d6c88 <_ZL22BlynkReadHandlerVector>:
   d6c88:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6c98:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6ca8:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6cb8:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6cc8:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6cd8:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6ce8:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6cf8:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6d08:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6d18:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6d28:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6d38:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6d48:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6d58:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6d68:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6d78:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6d88:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6d98:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6da8:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6db8:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6dc8:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6dd8:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6de8:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6df8:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6e08:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6e18:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6e28:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6e38:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6e48:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6e58:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6e68:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..
   d6e78:	000d4edd 000d4edd 000d4edd 000d4edd     .N...N...N...N..

000d6e88 <_ZL23BlynkWriteHandlerVector>:
   d6e88:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6e98:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6ea8:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6eb8:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6ec8:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6ed8:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6ee8:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6ef8:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6f08:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6f18:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6f28:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6f38:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6f48:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6f58:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6f68:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6f78:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6f88:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6f98:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6fa8:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6fb8:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6fc8:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6fd8:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6fe8:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d6ff8:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d7008:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d7018:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d7028:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d7038:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d7048:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d7058:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d7068:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..
   d7078:	000d4edf 000d4edf 000d4edf 000d4edf     .N...N...N...N..

000d7088 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000d7090 <_ZTVN5spark13EthernetClassE>:
	...
   d7098:	000d54e3 000d54d9 000d54cf 000d54c5     .T...T...T...T..
   d70a8:	000d54b9 000d54ad 000d56fd 000d5705     .T...T...V...W..
   d70b8:	000d54a1 000d5499 000d548f 000d5485     .T...T...T...T..
   d70c8:	000d5735                                5W..

000d70cc <_ZTV7TwoWire>:
	...
   d70d4:	000d5501 000d554b 000d5523 000d5503     .U..KU..#U...U..
   d70e4:	000d552b 000d5533 000d553b 000d5543     +U..3U..;U..CU..

000d70f4 <_ZTV9IPAddress>:
	...
   d70fc:	000d558d 000d557d 000d557f 00707061     .U..}U...U..app.

000d710c <_ZTVN5spark12NetworkClassE>:
	...
   d7114:	000d56bd 000d56c7 000d56d1 000d56db     .V...V...V...V..
   d7124:	000d56e5 000d56f1 000d56fd 000d5705     .V...V...V...W..
   d7134:	000d570d 000d5719 000d5721 000d572b     .W...W..!W..+W..
   d7144:	000d5735                                5W..

000d7148 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7148:	18100800 38302820 69726977 7200676e     .... (08wiring.r
   d7158:	20766365 6f727265 203d2072 00006425     ecv error = %d..

000d7168 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7170:	000d5c03 000d5c25 000d603f 000d5c33     .\..%\..?`..3\..
   d7180:	000d5c05                                .\..

000d7184 <_ZTV9TCPClient>:
	...
   d718c:	000d5cb1 000d5ce5 000d5b81 000d5b9b     .\...\...[...[..
   d719c:	000d5ed5 000d5d47 000d5d19 000d5bc5     .^..G]...]...[..
   d71ac:	000d5ddf 000d6065 000d5d7b 000d5f89     .]..e`..{]..._..
   d71bc:	000d5bc7 000d5bf9 000d5bad 000d5c37     .[...[...[..7\..
   d71cc:	000d5cf9 252d5925 64252d6d 3a482554     .\..%Y-%m-%dT%H:
   d71dc:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d71ec <_ZTV11USARTSerial>:
	...
   d71f4:	000d6175 000d61e1 000d61b9 000d5829     ua...a...a..)X..
   d7204:	000d6189 000d61a5 000d6197 000d61b3     .a...a...a...a..
   d7214:	000d6177 000d617b                       wa..{a..

000d721c <_ZTV9USBSerial>:
	...
   d7224:	000d6275 000d62dd 000d62b3 000d5829     ub...b...b..)X..
   d7234:	000d62a5 000d6277 000d6287 000d62d7     .b..wb...b...b..
   d7244:	000d6297 000d6271                       .b..qb..

000d724c <_ZTVN5spark9WiFiClassE>:
	...
   d7254:	000d63df 000d63d5 000d63cb 000d6381     .c...c...c...c..
   d7264:	000d63bf 000d63b3 000d56fd 000d5705     .c...c...V...W..
   d7274:	000d63a7 000d639f 000d6395 000d638b     .c...c...c...c..
   d7284:	000d5735                                5W..

000d7288 <_ZSt7nothrow>:
	...

000d7289 <_ZTSSt19_Sp_make_shared_tag>:
   d7289:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d7299:	5f646572 00676174                        red_tag....

000d72a4 <_ZTISt19_Sp_make_shared_tag>:
   d72a4:	000d72e4 000d7289                       .r...r..

000d72ac <_ZTIN10__cxxabiv117__class_type_infoE>:
   d72ac:	000d7344 000d72b8 000d7368              Ds...r..hs..

000d72b8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d72b8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d72c8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d72d8:	00000045                                E...

000d72dc <_ZTVN10__cxxabiv117__class_type_infoE>:
   d72dc:	00000000 000d72ac 000d6771 000d6785     .....r..qg...g..
   d72ec:	000d6919 000d6919 000d67ef 000d6731     .i...i...g..1g..
   d72fc:	000d67d7 000d6799 000d6765              .g...g..eg..

000d7308 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d7308:	000d7344 000d7314 000d72ac              Ds...s...r..

000d7314 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d7314:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d7324:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d7334:	456f666e 00000000                       nfoE....

000d733c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d733c:	00000000 000d7308 000d6819 000d682d     .....s...h..-h..
   d734c:	000d6919 000d6919 000d67ef 000d6731     .i...i...g..1g..
   d735c:	000d68ed 000d6879 000d6841              .h..yh..Ah..

000d7368 <_ZTISt9type_info>:
   d7368:	000d72e4 000d7370                       .r..ps..

000d7370 <_ZTSSt9type_info>:
   d7370:	74397453 5f657079 6f666e69               St9type_info.

000d737d <_ctype_>:
   d737d:	20202000 20202020 28282020 20282828     .         ((((( 
   d738d:	20202020 20202020 20202020 20202020                     
   d739d:	10108820 10101010 10101010 10101010      ...............
   d73ad:	04040410 04040404 10040404 10101010     ................
   d73bd:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d73cd:	01010101 01010101 01010101 10101010     ................
   d73dd:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d73ed:	02020202 02020202 02020202 10101010     ................
   d73fd:	00000020 00000000 00000000 00000000      ...............
	...

000d747e <link_const_variable_data_end>:
	...

000d7480 <link_constructors_location>:
   d7480:	000d4b9d 	.word	0x000d4b9d
   d7484:	000d545d 	.word	0x000d545d
   d7488:	000d54ed 	.word	0x000d54ed
   d748c:	000d56ad 	.word	0x000d56ad
   d7490:	000d5815 	.word	0x000d5815
   d7494:	000d595d 	.word	0x000d595d
   d7498:	000d5b45 	.word	0x000d5b45
   d749c:	000d6161 	.word	0x000d6161
   d74a0:	000d63e9 	.word	0x000d63e9

000d74a4 <link_constructors_end>:
	...
